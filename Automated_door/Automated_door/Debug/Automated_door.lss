
Automated_door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00001236  000012aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002370  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000708  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00003e00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001cbb  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  00005c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e96  00000000  00000000  000065fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00007494  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000791  00000000  00000000  00007870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bfd  00000000  00000000  00008001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 19 09 	jmp	0x1232	; 0x1232 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define NUMBER_OF_TRIALS					3
#define MAX_TIME_FOR_ACTION					10


int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_eeprom;
	u8 LOC_iter , LOC_trials = NUMBER_OF_TRIALS;
	u8 LOC_PassArr[PASSWORD_SIZE];
	
	//Initializations
	Port_Init();
      a6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Port_Init>
	KYP_Init();
      aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <KYP_Init>
	LCD_Init();
      ae:	0e 94 ed 02 	call	0x5da	; 0x5da <LCD_Init>
	EXEEPROM_vInit();
      b2:	0e 94 ac 01 	call	0x358	; 0x358 <EXEEPROM_vInit>
	
	// Read the Address of password to check if it has been written before
	EXEEPROM_vReadByte(EEPROM_DOOR_ADDRESS,&LOC_eeprom);
      b6:	80 e2       	ldi	r24, 0x20	; 32
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	be 01       	movw	r22, r28
      bc:	6f 5f       	subi	r22, 0xFF	; 255
      be:	7f 4f       	sbci	r23, 0xFF	; 255
      c0:	0e 94 ce 01 	call	0x39c	; 0x39c <EXEEPROM_vReadByte>
	
	//Set the password if it is the first time accessing
	if(LOC_eeprom == EEPROM_DOOR_NOT_ACCESSED)
      c4:	89 81       	ldd	r24, Y+1	; 0x01
      c6:	8f 3f       	cpi	r24, 0xFF	; 255
      c8:	09 f0       	breq	.+2      	; 0xcc <main+0x3a>
      ca:	60 c0       	rjmp	.+192    	; 0x18c <main+0xfa>
	{
		LCD_Send_XY(1,8,"Welcome");
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	68 e0       	ldi	r22, 0x08	; 8
      d0:	40 e6       	ldi	r20, 0x60	; 96
      d2:	50 e0       	ldi	r21, 0x00	; 0
      d4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		LCD_Send_XY(2,1,"Set Your Password:");
      d8:	82 e0       	ldi	r24, 0x02	; 2
      da:	61 e0       	ldi	r22, 0x01	; 1
      dc:	48 e6       	ldi	r20, 0x68	; 104
      de:	50 e0       	ldi	r21, 0x00	; 0
      e0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		LCD_Send_XY(3,1,"");
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	4b e7       	ldi	r20, 0x7B	; 123
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
      f0:	00 e2       	ldi	r16, 0x20	; 32
      f2:	10 e0       	ldi	r17, 0x00	; 0
				LOC_Press = KYP_u8GetPressedKey();
				_delay_ms(200);
			}while(!(LOC_Press>='0' && LOC_Press<='9'));
			LCD_SendData(LOC_Press);
			_delay_ms(500);
			LCD_Send_XY(3,LOC_iter+1,"*");
      f4:	0f 2e       	mov	r0, r31
      f6:	fc e7       	ldi	r31, 0x7C	; 124
      f8:	cf 2e       	mov	r12, r31
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	df 2e       	mov	r13, r31
      fe:	f0 2d       	mov	r31, r0
		LCD_Send_XY(2,1,"Set Your Password:");
		LCD_Send_XY(3,1,"");
		for(LOC_iter = 0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
		{
			do{
				LOC_Press = KYP_u8GetPressedKey();
     100:	0e 94 07 02 	call	0x40e	; 0x40e <KYP_u8GetPressedKey>
     104:	e8 2e       	mov	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     106:	8f ef       	ldi	r24, 0xFF	; 255
     108:	93 ec       	ldi	r25, 0xC3	; 195
     10a:	a9 e0       	ldi	r26, 0x09	; 9
     10c:	81 50       	subi	r24, 0x01	; 1
     10e:	90 40       	sbci	r25, 0x00	; 0
     110:	a0 40       	sbci	r26, 0x00	; 0
     112:	e1 f7       	brne	.-8      	; 0x10c <main+0x7a>
     114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x84>
     116:	00 00       	nop
				_delay_ms(200);
			}while(!(LOC_Press>='0' && LOC_Press<='9'));
     118:	8e 2d       	mov	r24, r14
     11a:	80 53       	subi	r24, 0x30	; 48
     11c:	8a 30       	cpi	r24, 0x0A	; 10
     11e:	80 f7       	brcc	.-32     	; 0x100 <main+0x6e>
			LCD_SendData(LOC_Press);
     120:	8e 2d       	mov	r24, r14
     122:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendData>
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	99 e6       	ldi	r25, 0x69	; 105
     12a:	a8 e1       	ldi	r26, 0x18	; 24
     12c:	81 50       	subi	r24, 0x01	; 1
     12e:	90 40       	sbci	r25, 0x00	; 0
     130:	a0 40       	sbci	r26, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <main+0x9a>
     134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xa4>
     136:	00 00       	nop
#define PASSWORD_SIZE						4
#define NUMBER_OF_TRIALS					3
#define MAX_TIME_FOR_ACTION					10


int main(void)
     138:	60 2f       	mov	r22, r16
     13a:	6f 51       	subi	r22, 0x1F	; 31
				LOC_Press = KYP_u8GetPressedKey();
				_delay_ms(200);
			}while(!(LOC_Press>='0' && LOC_Press<='9'));
			LCD_SendData(LOC_Press);
			_delay_ms(500);
			LCD_Send_XY(3,LOC_iter+1,"*");
     13c:	83 e0       	ldi	r24, 0x03	; 3
     13e:	a6 01       	movw	r20, r12
     140:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
			//write the number in its location in EEPROM
			EXEEPROM_vWriteByte(EEPROM_DOOR_ADDRESS+LOC_iter,LOC_Press);
     144:	c8 01       	movw	r24, r16
     146:	6e 2d       	mov	r22, r14
     148:	0e 94 b0 01 	call	0x360	; 0x360 <EXEEPROM_vWriteByte>
     14c:	0f 5f       	subi	r16, 0xFF	; 255
     14e:	1f 4f       	sbci	r17, 0xFF	; 255
	if(LOC_eeprom == EEPROM_DOOR_NOT_ACCESSED)
	{
		LCD_Send_XY(1,8,"Welcome");
		LCD_Send_XY(2,1,"Set Your Password:");
		LCD_Send_XY(3,1,"");
		for(LOC_iter = 0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
     150:	04 32       	cpi	r16, 0x24	; 36
     152:	11 05       	cpc	r17, r1
     154:	a9 f6       	brne	.-86     	; 0x100 <main+0x6e>
			LCD_Send_XY(3,LOC_iter+1,"*");
			//write the number in its location in EEPROM
			EXEEPROM_vWriteByte(EEPROM_DOOR_ADDRESS+LOC_iter,LOC_Press);
		}
		
		LCD_SendCMD(CLR_SCREEN);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
		LCD_Send_XY(2,4,"Password Saved");
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	64 e0       	ldi	r22, 0x04	; 4
     160:	4e e7       	ldi	r20, 0x7E	; 126
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		LCD_Send_XY(3,5,"Successfully");
     168:	83 e0       	ldi	r24, 0x03	; 3
     16a:	65 e0       	ldi	r22, 0x05	; 5
     16c:	4d e8       	ldi	r20, 0x8D	; 141
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
     174:	8f ef       	ldi	r24, 0xFF	; 255
     176:	93 ed       	ldi	r25, 0xD3	; 211
     178:	a0 e3       	ldi	r26, 0x30	; 48
     17a:	81 50       	subi	r24, 0x01	; 1
     17c:	90 40       	sbci	r25, 0x00	; 0
     17e:	a0 40       	sbci	r26, 0x00	; 0
     180:	e1 f7       	brne	.-8      	; 0x17a <main+0xe8>
     182:	00 c0       	rjmp	.+0      	; 0x184 <main+0xf2>
     184:	00 00       	nop
		_delay_ms(1000);
		LCD_SendCMD(CLR_SCREEN);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
	//Set the password if it is the first time accessing
	if(LOC_eeprom == EEPROM_DOOR_NOT_ACCESSED)
	{
		LCD_Send_XY(1,8,"Welcome");
		LCD_Send_XY(2,1,"Set Your Password:");
		LCD_Send_XY(3,1,"");
     18c:	0f 2e       	mov	r0, r31
     18e:	f3 e0       	ldi	r31, 0x03	; 3
     190:	5f 2e       	mov	r5, r31
     192:	f0 2d       	mov	r31, r0
	LOC_iter = 0;
	
	//loop that breaks if the number of trials is passed or the password is correct
	while(LOC_trials>0 && LOC_iter!=PASSWORD_SIZE)
	{
		LCD_Send_XY(1,6,"Door LOCKED");
     194:	0f 2e       	mov	r0, r31
     196:	fa e9       	ldi	r31, 0x9A	; 154
     198:	2f 2e       	mov	r2, r31
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	3f 2e       	mov	r3, r31
     19e:	f0 2d       	mov	r31, r0
		LCD_Send_XY(2,1,"Enter Password:");
		LCD_Send_XY(3,1,"");
     1a0:	0f 2e       	mov	r0, r31
     1a2:	fb e7       	ldi	r31, 0x7B	; 123
     1a4:	8f 2e       	mov	r8, r31
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	9f 2e       	mov	r9, r31
     1aa:	f0 2d       	mov	r31, r0
     1ac:	66 24       	eor	r6, r6
     1ae:	77 24       	eor	r7, r7
     1b0:	68 94       	set
     1b2:	61 f8       	bld	r6, 1
     1b4:	6c 0e       	add	r6, r28
     1b6:	7d 1e       	adc	r7, r29
     1b8:	6e 82       	std	Y+6, r6	; 0x06
     1ba:	7f 82       	std	Y+7, r7	; 0x07
		for(LOC_iter=0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
     1bc:	44 24       	eor	r4, r4
				LOC_Press = KYP_u8GetPressedKey();
				_delay_ms(200);
			}while(!(LOC_Press>='0' && LOC_Press<='9'));
			LCD_SendData(LOC_Press);
			_delay_ms(500);
			LCD_Send_XY(3,LOC_iter+1,"*");
     1be:	0f 2e       	mov	r0, r31
     1c0:	fc e7       	ldi	r31, 0x7C	; 124
     1c2:	af 2e       	mov	r10, r31
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	bf 2e       	mov	r11, r31
     1c8:	f0 2d       	mov	r31, r0
	LOC_iter = 0;
	
	//loop that breaks if the number of trials is passed or the password is correct
	while(LOC_trials>0 && LOC_iter!=PASSWORD_SIZE)
	{
		LCD_Send_XY(1,6,"Door LOCKED");
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	66 e0       	ldi	r22, 0x06	; 6
     1ce:	a1 01       	movw	r20, r2
     1d0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		LCD_Send_XY(2,1,"Enter Password:");
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	46 ea       	ldi	r20, 0xA6	; 166
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		LCD_Send_XY(3,1,"");
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	a4 01       	movw	r20, r8
     1e6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
     1ea:	63 01       	movw	r12, r6
     1ec:	ee 80       	ldd	r14, Y+6	; 0x06
     1ee:	ff 80       	ldd	r15, Y+7	; 0x07
		for(LOC_iter=0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
     1f0:	04 2d       	mov	r16, r4
		{
			do{
				LOC_Press = KYP_u8GetPressedKey();
     1f2:	0e 94 07 02 	call	0x40e	; 0x40e <KYP_u8GetPressedKey>
     1f6:	18 2f       	mov	r17, r24
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	93 ec       	ldi	r25, 0xC3	; 195
     1fc:	a9 e0       	ldi	r26, 0x09	; 9
     1fe:	81 50       	subi	r24, 0x01	; 1
     200:	90 40       	sbci	r25, 0x00	; 0
     202:	a0 40       	sbci	r26, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x16c>
     206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x176>
     208:	00 00       	nop
				_delay_ms(200);
			}while(!(LOC_Press>='0' && LOC_Press<='9'));
     20a:	81 2f       	mov	r24, r17
     20c:	80 53       	subi	r24, 0x30	; 48
     20e:	8a 30       	cpi	r24, 0x0A	; 10
     210:	80 f7       	brcc	.-32     	; 0x1f2 <main+0x160>
			LCD_SendData(LOC_Press);
     212:	81 2f       	mov	r24, r17
     214:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendData>
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	99 e6       	ldi	r25, 0x69	; 105
     21c:	a8 e1       	ldi	r26, 0x18	; 24
     21e:	81 50       	subi	r24, 0x01	; 1
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	a0 40       	sbci	r26, 0x00	; 0
     224:	e1 f7       	brne	.-8      	; 0x21e <main+0x18c>
     226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x196>
     228:	00 00       	nop
			_delay_ms(500);
			LCD_Send_XY(3,LOC_iter+1,"*");
     22a:	0f 5f       	subi	r16, 0xFF	; 255
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	60 2f       	mov	r22, r16
     230:	a5 01       	movw	r20, r10
     232:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
			//storing the entered password in an array
			LOC_PassArr[LOC_iter] = LOC_Press;
     236:	d7 01       	movw	r26, r14
     238:	1d 93       	st	X+, r17
     23a:	7d 01       	movw	r14, r26
	while(LOC_trials>0 && LOC_iter!=PASSWORD_SIZE)
	{
		LCD_Send_XY(1,6,"Door LOCKED");
		LCD_Send_XY(2,1,"Enter Password:");
		LCD_Send_XY(3,1,"");
		for(LOC_iter=0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
     23c:	04 30       	cpi	r16, 0x04	; 4
     23e:	c9 f6       	brne	.-78     	; 0x1f2 <main+0x160>
     240:	ee 24       	eor	r14, r14
     242:	ff 24       	eor	r15, r15
     244:	68 94       	set
     246:	e5 f8       	bld	r14, 5
     248:	14 2d       	mov	r17, r4
		}
		
		//for loop compares the stored password with the entered, LOC_iter = PASSWORD_SIZE if the password is correct
		for(LOC_iter=0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
		{
			EXEEPROM_vReadByte(EEPROM_DOOR_ADDRESS+LOC_iter,&LOC_eeprom);
     24a:	c7 01       	movw	r24, r14
     24c:	be 01       	movw	r22, r28
     24e:	6f 5f       	subi	r22, 0xFF	; 255
     250:	7f 4f       	sbci	r23, 0xFF	; 255
     252:	0e 94 ce 01 	call	0x39c	; 0x39c <EXEEPROM_vReadByte>
			if(LOC_eeprom != LOC_PassArr[LOC_iter])
     256:	f6 01       	movw	r30, r12
     258:	91 91       	ld	r25, Z+
     25a:	6f 01       	movw	r12, r30
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	98 17       	cp	r25, r24
     260:	21 f0       	breq	.+8      	; 0x26a <main+0x1d8>
			{
				LOC_trials--;
     262:	5a 94       	dec	r5
				break;
			}
		}
		
		//the password is wrong
		if(LOC_iter != PASSWORD_SIZE)
     264:	14 30       	cpi	r17, 0x04	; 4
     266:	41 f4       	brne	.+16     	; 0x278 <main+0x1e6>
     268:	31 c0       	rjmp	.+98     	; 0x2cc <main+0x23a>
			//storing the entered password in an array
			LOC_PassArr[LOC_iter] = LOC_Press;
		}
		
		//for loop compares the stored password with the entered, LOC_iter = PASSWORD_SIZE if the password is correct
		for(LOC_iter=0 ; LOC_iter<PASSWORD_SIZE ; LOC_iter++)
     26a:	1f 5f       	subi	r17, 0xFF	; 255
     26c:	08 94       	sec
     26e:	e1 1c       	adc	r14, r1
     270:	f1 1c       	adc	r15, r1
     272:	14 30       	cpi	r17, 0x04	; 4
     274:	51 f7       	brne	.-44     	; 0x24a <main+0x1b8>
     276:	2a c0       	rjmp	.+84     	; 0x2cc <main+0x23a>
		}
		
		//the password is wrong
		if(LOC_iter != PASSWORD_SIZE)
		{
			LCD_SendCMD(CLR_SCREEN);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
			LCD_Send_XY(1,3,"Wrong Password");
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	63 e0       	ldi	r22, 0x03	; 3
     282:	46 eb       	ldi	r20, 0xB6	; 182
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
			LCD_Send_XY(3,1,"");
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	a4 01       	movw	r20, r8
     290:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
			LCD_SendData(LOC_trials+48);
     294:	85 2d       	mov	r24, r5
     296:	80 5d       	subi	r24, 0xD0	; 208
     298:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendData>
			if(LOC_trials == 1 || LOC_trials == 0)
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	f5 15       	cp	r31, r5
     2a0:	28 f0       	brcs	.+10     	; 0x2ac <main+0x21a>
			{
				LCD_SendString(" Trial Left");
     2a2:	85 ec       	ldi	r24, 0xC5	; 197
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_SendString>
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <main+0x222>
			}
			else
			{
				LCD_SendString(" Trials Left");
     2ac:	81 ed       	ldi	r24, 0xD1	; 209
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_SendString>
     2b4:	8f ef       	ldi	r24, 0xFF	; 255
     2b6:	9d e3       	ldi	r25, 0x3D	; 61
     2b8:	a9 e4       	ldi	r26, 0x49	; 73
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	90 40       	sbci	r25, 0x00	; 0
     2be:	a0 40       	sbci	r26, 0x00	; 0
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x228>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x232>
     2c4:	00 00       	nop
			}
			_delay_ms(1500);
			LCD_SendCMD(CLR_SCREEN);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
	}
	
	LOC_iter = 0;
	
	//loop that breaks if the number of trials is passed or the password is correct
	while(LOC_trials>0 && LOC_iter!=PASSWORD_SIZE)
     2cc:	55 20       	and	r5, r5
     2ce:	21 f0       	breq	.+8      	; 0x2d8 <main+0x246>
     2d0:	14 30       	cpi	r17, 0x04	; 4
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x244>
     2d4:	7a cf       	rjmp	.-268    	; 0x1ca <main+0x138>
     2d6:	2d c0       	rjmp	.+90     	; 0x332 <main+0x2a0>
	}
	
	//last trial is also wrong
	if(LOC_trials == 0)
	{
		LCD_SendCMD(CLR_SCREEN);
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
		LCD_Send_XY(1,4,"Wrong Password");
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	64 e0       	ldi	r22, 0x04	; 4
     2e2:	46 eb       	ldi	r20, 0xB6	; 182
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		
		//looping forever on the alert
		while(1)
		{
			Dio_WriteChannel(PA_4,STD_HIGH);
     2ea:	84 e0       	ldi	r24, 0x04	; 4
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
			Dio_WriteChannel(PC_6,STD_HIGH);
     2f2:	86 e1       	ldi	r24, 0x16	; 22
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	99 e6       	ldi	r25, 0x69	; 105
     2fe:	a8 e1       	ldi	r26, 0x18	; 24
     300:	81 50       	subi	r24, 0x01	; 1
     302:	90 40       	sbci	r25, 0x00	; 0
     304:	a0 40       	sbci	r26, 0x00	; 0
     306:	e1 f7       	brne	.-8      	; 0x300 <main+0x26e>
     308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x278>
     30a:	00 00       	nop
			_delay_ms(500);
			Dio_WriteChannel(PA_4,STD_LOW);
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
			Dio_WriteChannel(PC_6,STD_LOW);
     314:	86 e1       	ldi	r24, 0x16	; 22
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	91 ee       	ldi	r25, 0xE1	; 225
     320:	a4 e0       	ldi	r26, 0x04	; 4
     322:	81 50       	subi	r24, 0x01	; 1
     324:	90 40       	sbci	r25, 0x00	; 0
     326:	a0 40       	sbci	r26, 0x00	; 0
     328:	e1 f7       	brne	.-8      	; 0x322 <main+0x290>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x29a>
     32c:	00 00       	nop
     32e:	dd cf       	rjmp	.-70     	; 0x2ea <main+0x258>
     330:	ff cf       	rjmp	.-2      	; 0x330 <main+0x29e>
	}
	
	//the password is correct
	else
	{
		LCD_SendCMD(CLR_SCREEN);
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
		LCD_Send_XY(1,7,"Welcome");
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	67 e0       	ldi	r22, 0x07	; 7
     33c:	40 e6       	ldi	r20, 0x60	; 96
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		LCD_Send_XY(3,3,"Door UNLOCKED");
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	63 e0       	ldi	r22, 0x03	; 3
     348:	4e ed       	ldi	r20, 0xDE	; 222
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_Send_XY>
		//unlocking the door by rotating the servo 90
		SRVM_voidOn(90);
     350:	8a e5       	ldi	r24, 0x5A	; 90
     352:	0e 94 d6 03 	call	0x7ac	; 0x7ac <SRVM_voidOn>
     356:	ec cf       	rjmp	.-40     	; 0x330 <main+0x29e>

00000358 <EXEEPROM_vInit>:
#include "EXEEPROM_PRIVATE.h"

/***************************************************************************************************/
void EXEEPROM_vInit(void)
{
	TWI_vInitMaster(20);
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	0e 94 5d 05 	call	0xaba	; 0xaba <TWI_vInitMaster>
}
     35e:	08 95       	ret

00000360 <EXEEPROM_vWriteByte>:
/***************************************************************************************************/
void EXEEPROM_vWriteByte(u16 Copy_u16WordAddress, u8 Copy_u8Data)
{
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	d8 2f       	mov	r29, r24
     368:	19 2f       	mov	r17, r25
     36a:	c6 2f       	mov	r28, r22
	u8 LOC_u8Address = (Copy_u16WordAddress>>8) | EEPROM_ADDRESS;
	
	//Send Start Condition
	TWI_vSendStartCondition();
     36c:	0e 94 6c 05 	call	0xad8	; 0xad8 <TWI_vSendStartCondition>
	
	//Send EEPROM + MS bits of EEPROM address
	TWI_vSendSlaveAddressWithWrite(LOC_u8Address);
     370:	81 2f       	mov	r24, r17
     372:	80 65       	ori	r24, 0x50	; 80
     374:	0e 94 8f 05 	call	0xb1e	; 0xb1e <TWI_vSendSlaveAddressWithWrite>
	
	//Send EEPROM Word address
	TWI_vWriteMasterDataByte((u8)Copy_u16WordAddress);
     378:	8d 2f       	mov	r24, r29
     37a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <TWI_vWriteMasterDataByte>
	
	//Send Data
	TWI_vWriteMasterDataByte(Copy_u8Data);
     37e:	8c 2f       	mov	r24, r28
     380:	0e 94 b5 05 	call	0xb6a	; 0xb6a <TWI_vWriteMasterDataByte>
	
	//Stop Condition
	TWI_vSendStopCondition();
     384:	0e 94 88 05 	call	0xb10	; 0xb10 <TWI_vSendStopCondition>
     388:	8f e1       	ldi	r24, 0x1F	; 31
     38a:	9e e4       	ldi	r25, 0x4E	; 78
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <EXEEPROM_vWriteByte+0x2c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <EXEEPROM_vWriteByte+0x32>
     392:	00 00       	nop
	
	//Self-timed Write Cycle
	_delay_ms(5);
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <EXEEPROM_vReadByte>:


/***************************************************************************************************/
void EXEEPROM_vReadByte(u16 Copy_u16WordAddress, u8* Copy_pu8RxData)
{
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	08 2f       	mov	r16, r24
     3a6:	eb 01       	movw	r28, r22
	if(Copy_pu8RxData != NULL)
     3a8:	20 97       	sbiw	r28, 0x00	; 0
     3aa:	d9 f0       	breq	.+54     	; 0x3e2 <EXEEPROM_vReadByte+0x46>
	{
		u8 LOC_u8Address = (Copy_u16WordAddress>>8) | EEPROM_ADDRESS;
     3ac:	19 2f       	mov	r17, r25
     3ae:	10 65       	ori	r17, 0x50	; 80
		
		//Send Start Condition
		TWI_vSendStartCondition();
     3b0:	0e 94 6c 05 	call	0xad8	; 0xad8 <TWI_vSendStartCondition>
		
		//Send EEPROM + MS bits of EEPROM address with Write Operation
		TWI_vSendSlaveAddressWithWrite(LOC_u8Address);
     3b4:	81 2f       	mov	r24, r17
     3b6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <TWI_vSendSlaveAddressWithWrite>
		
		//Send EEPROM Word address
		TWI_vWriteMasterDataByte((u8)Copy_u16WordAddress);
     3ba:	80 2f       	mov	r24, r16
     3bc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <TWI_vWriteMasterDataByte>
		
		//Repeated start to switch operation to Read
		TWI_vSendRepStartCondition();
     3c0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <TWI_vSendRepStartCondition>
		
		//Send EEPROM + MS bits of EEPROM address with Read Operation
		TWI_vSendSlaveAddressWithRead(LOC_u8Address);
     3c4:	81 2f       	mov	r24, r17
     3c6:	0e 94 a2 05 	call	0xb44	; 0xb44 <TWI_vSendSlaveAddressWithRead>
		
		//Read Data from Slave
		TWI_vReadMasterDataByte(Copy_pu8RxData,TWI_DATA_RX_NACK);
     3ca:	ce 01       	movw	r24, r28
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	0e 94 c1 05 	call	0xb82	; 0xb82 <TWI_vReadMasterDataByte>
		
		//Send Stop Condition
		TWI_vSendStopCondition();
     3d2:	0e 94 88 05 	call	0xb10	; 0xb10 <TWI_vSendStopCondition>
     3d6:	8f e1       	ldi	r24, 0x1F	; 31
     3d8:	9e e4       	ldi	r25, 0x4E	; 78
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <EXEEPROM_vReadByte+0x3e>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <EXEEPROM_vReadByte+0x44>
     3e0:	00 00       	nop
		
		//Self-timed Write Cycle
		_delay_ms(5);
	}
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <KYP_Init>:
extern Dio_ChannelType KYP_ARR[8];

void KYP_Init(void)
{
	//pulling up columns
	Dio_WriteChannel(KYP_COL0,STD_HIGH);
     3ec:	8f e1       	ldi	r24, 0x1F	; 31
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(KYP_COL1,STD_HIGH);
     3f4:	8e e1       	ldi	r24, 0x1E	; 30
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(KYP_COL2,STD_HIGH);
     3fc:	8c e1       	ldi	r24, 0x1C	; 28
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(KYP_COL3,STD_HIGH);
     404:	8b e1       	ldi	r24, 0x1B	; 27
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
}
     40c:	08 95       	ret

0000040e <KYP_u8GetPressedKey>:

u8 KYP_u8GetPressedKey(void)
{
     40e:	2f 92       	push	r2
     410:	3f 92       	push	r3
     412:	4f 92       	push	r4
     414:	5f 92       	push	r5
     416:	6f 92       	push	r6
     418:	7f 92       	push	r7
     41a:	8f 92       	push	r8
     41c:	9f 92       	push	r9
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	60 97       	sbiw	r28, 0x10	; 16
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_KYP_ARR[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     442:	de 01       	movw	r26, r28
     444:	11 96       	adiw	r26, 0x01	; 1
     446:	e4 ef       	ldi	r30, 0xF4	; 244
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	01 90       	ld	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	81 50       	subi	r24, 0x01	; 1
     452:	e1 f7       	brne	.-8      	; 0x44c <KYP_u8GetPressedKey+0x3e>
     454:	0f 2e       	mov	r0, r31
     456:	fc ee       	ldi	r31, 0xEC	; 236
     458:	af 2e       	mov	r10, r31
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	bf 2e       	mov	r11, r31
     45e:	f0 2d       	mov	r31, r0
     460:	88 24       	eor	r8, r8
     462:	99 24       	eor	r9, r9
	u8 i,j;
	u8 LOC_READ = 1;
	
	for(i=0 ; i<4 ; i++)
	{
		Dio_WriteChannel(KYP_ARR[i],0);
     464:	0f 2e       	mov	r0, r31
     466:	f0 ef       	ldi	r31, 0xF0	; 240
     468:	2f 2e       	mov	r2, r31
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	3f 2e       	mov	r3, r31
     46e:	f0 2d       	mov	r31, r0
     470:	24 01       	movw	r4, r8
	Dio_WriteChannel(KYP_COL1,STD_HIGH);
	Dio_WriteChannel(KYP_COL2,STD_HIGH);
	Dio_WriteChannel(KYP_COL3,STD_HIGH);
}

u8 KYP_u8GetPressedKey(void)
     472:	35 01       	movw	r6, r10
	u8 i,j;
	u8 LOC_READ = 1;
	
	for(i=0 ; i<4 ; i++)
	{
		Dio_WriteChannel(KYP_ARR[i],0);
     474:	f5 01       	movw	r30, r10
     476:	80 81       	ld	r24, Z
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     47e:	71 01       	movw	r14, r2
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	10 e0       	ldi	r17, 0x00	; 0
		for(j=0 ; j<4 ; j++)
		{
			LOC_READ = Dio_ReadChannel(KYP_ARR[j+4]);
     484:	68 01       	movw	r12, r16
     486:	f7 01       	movw	r30, r14
     488:	81 91       	ld	r24, Z+
     48a:	7f 01       	movw	r14, r30
     48c:	0e 94 88 04 	call	0x910	; 0x910 <Dio_ReadChannel>
			if(LOC_READ == 0)
     490:	88 23       	and	r24, r24
     492:	99 f4       	brne	.+38     	; 0x4ba <KYP_u8GetPressedKey+0xac>
			{
				LOC_Ret = LOC_KYP_ARR[i][j];
     494:	f2 01       	movw	r30, r4
     496:	ee 0f       	add	r30, r30
     498:	ff 1f       	adc	r31, r31
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	ce 0e       	add	r12, r30
     4a0:	df 1e       	adc	r13, r31
     4a2:	fe 01       	movw	r30, r28
     4a4:	ec 0d       	add	r30, r12
     4a6:	fd 1d       	adc	r31, r13
     4a8:	01 81       	ldd	r16, Z+1	; 0x01
				break;
			}
		}
		Dio_WriteChannel(KYP_ARR[i],1);
     4aa:	f2 01       	movw	r30, r4
     4ac:	e4 51       	subi	r30, 0x14	; 20
     4ae:	ff 4f       	sbci	r31, 0xFF	; 255
     4b0:	80 81       	ld	r24, Z
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <KYP_u8GetPressedKey+0xb8>
     4ba:	0f 5f       	subi	r16, 0xFF	; 255
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 LOC_READ = 1;
	
	for(i=0 ; i<4 ; i++)
	{
		Dio_WriteChannel(KYP_ARR[i],0);
		for(j=0 ; j<4 ; j++)
     4be:	04 30       	cpi	r16, 0x04	; 4
     4c0:	11 05       	cpc	r17, r1
     4c2:	01 f7       	brne	.-64     	; 0x484 <KYP_u8GetPressedKey+0x76>
     4c4:	1a c0       	rjmp	.+52     	; 0x4fa <KYP_u8GetPressedKey+0xec>
		{
			break;
		}
	}
	return LOC_Ret;
     4c6:	80 2f       	mov	r24, r16
     4c8:	60 96       	adiw	r28, 0x10	; 16
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	7f 90       	pop	r7
     4ee:	6f 90       	pop	r6
     4f0:	5f 90       	pop	r5
     4f2:	4f 90       	pop	r4
     4f4:	3f 90       	pop	r3
     4f6:	2f 90       	pop	r2
     4f8:	08 95       	ret
		if(LOC_READ == 0)
		{
			break;
		}
	}
	return LOC_Ret;
     4fa:	08 94       	sec
     4fc:	a1 1c       	adc	r10, r1
     4fe:	b1 1c       	adc	r11, r1
			{
				LOC_Ret = LOC_KYP_ARR[i][j];
				break;
			}
		}
		Dio_WriteChannel(KYP_ARR[i],1);
     500:	f3 01       	movw	r30, r6
     502:	80 81       	ld	r24, Z
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     50a:	08 94       	sec
     50c:	81 1c       	adc	r8, r1
     50e:	91 1c       	adc	r9, r1
	u8 LOC_KYP_ARR[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	u8 LOC_Ret = KYP_NOT_PRESSED;
	u8 i,j;
	u8 LOC_READ = 1;
	
	for(i=0 ; i<4 ; i++)
     510:	f4 e0       	ldi	r31, 0x04	; 4
     512:	8f 16       	cp	r8, r31
     514:	91 04       	cpc	r9, r1
     516:	09 f0       	breq	.+2      	; 0x51a <KYP_u8GetPressedKey+0x10c>
     518:	ab cf       	rjmp	.-170    	; 0x470 <KYP_u8GetPressedKey+0x62>
     51a:	0f ef       	ldi	r16, 0xFF	; 255
     51c:	d4 cf       	rjmp	.-88     	; 0x4c6 <KYP_u8GetPressedKey+0xb8>

0000051e <LCD_SendTrigger>:
	LCD_SendTrigger();
}

static void LCD_SendTrigger(void)
{
	Dio_WriteChannel(LCD_EN,STD_HIGH);
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	9f e1       	ldi	r25, 0x1F	; 31
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_SendTrigger+0xc>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_SendTrigger+0x12>
     530:	00 00       	nop
	_delay_ms(2);
	Dio_WriteChannel(LCD_EN,STD_LOW);
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
     53a:	8f e3       	ldi	r24, 0x3F	; 63
     53c:	9f e1       	ldi	r25, 0x1F	; 31
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <LCD_SendTrigger+0x20>
     542:	00 c0       	rjmp	.+0      	; 0x544 <LCD_SendTrigger+0x26>
     544:	00 00       	nop
	_delay_ms(2);
}
     546:	08 95       	ret

00000548 <LCD_SendCMD>:
	LCD_SendCMD(ENTRY_MODE);
	_delay_ms(1);
}

void LCD_SendCMD(u8 Command)
{
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
	Dio_WriteChannel(LCD_D4,GET_BIT(Command,4));
     54c:	68 2f       	mov	r22, r24
     54e:	62 95       	swap	r22
     550:	6f 70       	andi	r22, 0x0F	; 15
     552:	61 70       	andi	r22, 0x01	; 1
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Command,5));
     55a:	6c 2f       	mov	r22, r28
     55c:	62 95       	swap	r22
     55e:	66 95       	lsr	r22
     560:	67 70       	andi	r22, 0x07	; 7
     562:	61 70       	andi	r22, 0x01	; 1
     564:	89 e0       	ldi	r24, 0x09	; 9
     566:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Command,6));
     56a:	6c 2f       	mov	r22, r28
     56c:	62 95       	swap	r22
     56e:	66 95       	lsr	r22
     570:	66 95       	lsr	r22
     572:	63 70       	andi	r22, 0x03	; 3
     574:	61 70       	andi	r22, 0x01	; 1
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Command,7));
     57c:	6c 2f       	mov	r22, r28
     57e:	66 1f       	adc	r22, r22
     580:	66 27       	eor	r22, r22
     582:	66 1f       	adc	r22, r22
     584:	8c e0       	ldi	r24, 0x0C	; 12
     586:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_LOW);
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	LCD_SendTrigger();
     592:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SendTrigger>
	Dio_WriteChannel(LCD_D4,GET_BIT(Command,0));
     596:	6c 2f       	mov	r22, r28
     598:	61 70       	andi	r22, 0x01	; 1
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Command,1));
     5a0:	6c 2f       	mov	r22, r28
     5a2:	66 95       	lsr	r22
     5a4:	61 70       	andi	r22, 0x01	; 1
     5a6:	89 e0       	ldi	r24, 0x09	; 9
     5a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Command,2));
     5ac:	6c 2f       	mov	r22, r28
     5ae:	66 95       	lsr	r22
     5b0:	66 95       	lsr	r22
     5b2:	61 70       	andi	r22, 0x01	; 1
     5b4:	8a e0       	ldi	r24, 0x0A	; 10
     5b6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Command,3));
     5ba:	c6 95       	lsr	r28
     5bc:	c6 95       	lsr	r28
     5be:	c6 95       	lsr	r28
     5c0:	6c 2f       	mov	r22, r28
     5c2:	61 70       	andi	r22, 0x01	; 1
     5c4:	8c e0       	ldi	r24, 0x0C	; 12
     5c6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_LOW);
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	LCD_SendTrigger();
     5d2:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SendTrigger>
}
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <LCD_Init>:
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	92 e5       	ldi	r25, 0x52	; 82
     5de:	a7 e0       	ldi	r26, 0x07	; 7
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	a0 40       	sbci	r26, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <LCD_Init+0x6>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <LCD_Init+0x10>
     5ea:	00 00       	nop
#include "LCD_CONFIG.h"

void LCD_Init(void)
{
	_delay_ms(150);
	LCD_SendCMD(RETURN_HOME);
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
     5f2:	af e3       	ldi	r26, 0x3F	; 63
     5f4:	bc e9       	ldi	r27, 0x9C	; 156
     5f6:	11 97       	sbiw	r26, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <LCD_Init+0x1c>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <LCD_Init+0x22>
     5fc:	00 00       	nop
	_delay_ms(10);
	LCD_SendCMD(FOUR_BIT);
     5fe:	88 e2       	ldi	r24, 0x28	; 40
     600:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
     604:	8f e9       	ldi	r24, 0x9F	; 159
     606:	9f e0       	ldi	r25, 0x0F	; 15
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <LCD_Init+0x2e>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <LCD_Init+0x34>
     60e:	00 00       	nop
	_delay_ms(1);
	LCD_SendCMD(DISPLAY_ON_CURSOR_OFF);
     610:	8c e0       	ldi	r24, 0x0C	; 12
     612:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
     616:	af e9       	ldi	r26, 0x9F	; 159
     618:	bf e0       	ldi	r27, 0x0F	; 15
     61a:	11 97       	sbiw	r26, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_Init+0x40>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_Init+0x46>
     620:	00 00       	nop
	_delay_ms(1);
	LCD_SendCMD(CLR_SCREEN);
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
     628:	8f e3       	ldi	r24, 0x3F	; 63
     62a:	9c e9       	ldi	r25, 0x9C	; 156
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_Init+0x52>
     630:	00 c0       	rjmp	.+0      	; 0x632 <LCD_Init+0x58>
     632:	00 00       	nop
	_delay_ms(10);
	LCD_SendCMD(ENTRY_MODE);
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
     63a:	af e9       	ldi	r26, 0x9F	; 159
     63c:	bf e0       	ldi	r27, 0x0F	; 15
     63e:	11 97       	sbiw	r26, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <LCD_Init+0x64>
     642:	00 c0       	rjmp	.+0      	; 0x644 <LCD_Init+0x6a>
     644:	00 00       	nop
	_delay_ms(1);
}
     646:	08 95       	ret

00000648 <LCD_SendData>:
	LCD_SendTrigger();
}


void LCD_SendData(u8 Data)
{
     648:	cf 93       	push	r28
     64a:	c8 2f       	mov	r28, r24
	Dio_WriteChannel(LCD_D4,GET_BIT(Data,4));
     64c:	68 2f       	mov	r22, r24
     64e:	62 95       	swap	r22
     650:	6f 70       	andi	r22, 0x0F	; 15
     652:	61 70       	andi	r22, 0x01	; 1
     654:	88 e0       	ldi	r24, 0x08	; 8
     656:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Data,5));
     65a:	6c 2f       	mov	r22, r28
     65c:	62 95       	swap	r22
     65e:	66 95       	lsr	r22
     660:	67 70       	andi	r22, 0x07	; 7
     662:	61 70       	andi	r22, 0x01	; 1
     664:	89 e0       	ldi	r24, 0x09	; 9
     666:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Data,6));
     66a:	6c 2f       	mov	r22, r28
     66c:	62 95       	swap	r22
     66e:	66 95       	lsr	r22
     670:	66 95       	lsr	r22
     672:	63 70       	andi	r22, 0x03	; 3
     674:	61 70       	andi	r22, 0x01	; 1
     676:	8a e0       	ldi	r24, 0x0A	; 10
     678:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Data,7));
     67c:	6c 2f       	mov	r22, r28
     67e:	66 1f       	adc	r22, r22
     680:	66 27       	eor	r22, r22
     682:	66 1f       	adc	r22, r22
     684:	8c e0       	ldi	r24, 0x0C	; 12
     686:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_HIGH);
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	LCD_SendTrigger();
     692:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SendTrigger>
	Dio_WriteChannel(LCD_D4,GET_BIT(Data,0));
     696:	6c 2f       	mov	r22, r28
     698:	61 70       	andi	r22, 0x01	; 1
     69a:	88 e0       	ldi	r24, 0x08	; 8
     69c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D5,GET_BIT(Data,1));
     6a0:	6c 2f       	mov	r22, r28
     6a2:	66 95       	lsr	r22
     6a4:	61 70       	andi	r22, 0x01	; 1
     6a6:	89 e0       	ldi	r24, 0x09	; 9
     6a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D6,GET_BIT(Data,2));
     6ac:	6c 2f       	mov	r22, r28
     6ae:	66 95       	lsr	r22
     6b0:	66 95       	lsr	r22
     6b2:	61 70       	andi	r22, 0x01	; 1
     6b4:	8a e0       	ldi	r24, 0x0A	; 10
     6b6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_D7,GET_BIT(Data,3));
     6ba:	c6 95       	lsr	r28
     6bc:	c6 95       	lsr	r28
     6be:	c6 95       	lsr	r28
     6c0:	6c 2f       	mov	r22, r28
     6c2:	61 70       	andi	r22, 0x01	; 1
     6c4:	8c e0       	ldi	r24, 0x0C	; 12
     6c6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	Dio_WriteChannel(LCD_RS,STD_HIGH);
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Dio_WriteChannel>
	LCD_SendTrigger();
     6d2:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_SendTrigger>
}
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <LCD_SendString>:
	Dio_WriteChannel(LCD_EN,STD_LOW);
	_delay_ms(2);
}

void LCD_SendString(char* String)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
	while(*String != '\0')
     6e0:	88 81       	ld	r24, Y
     6e2:	88 23       	and	r24, r24
     6e4:	31 f0       	breq	.+12     	; 0x6f2 <LCD_SendString+0x18>
	_delay_ms(2);
	Dio_WriteChannel(LCD_EN,STD_LOW);
	_delay_ms(2);
}

void LCD_SendString(char* String)
     6e6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*String != '\0')
	{
		LCD_SendData(*String);
     6e8:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendData>
	_delay_ms(2);
}

void LCD_SendString(char* String)
{
	while(*String != '\0')
     6ec:	89 91       	ld	r24, Y+
     6ee:	88 23       	and	r24, r24
     6f0:	d9 f7       	brne	.-10     	; 0x6e8 <LCD_SendString+0xe>
	{
		LCD_SendData(*String);
		String++;
	}
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <LCD_Send_XY>:

void LCD_Send_XY(u8 X,u8 Y,char* String)
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ea 01       	movw	r28, r20
	u8 LOC;
	if(X==1 || X>4)
     6fe:	81 30       	cpi	r24, 0x01	; 1
     700:	11 f0       	breq	.+4      	; 0x706 <LCD_Send_XY+0xe>
     702:	85 30       	cpi	r24, 0x05	; 5
     704:	18 f0       	brcs	.+6      	; 0x70c <LCD_Send_XY+0x14>
	{
		LOC = ROW1_START+Y-1;
     706:	86 2f       	mov	r24, r22
     708:	81 58       	subi	r24, 0x81	; 129
     70a:	0c c0       	rjmp	.+24     	; 0x724 <LCD_Send_XY+0x2c>
	}
	else if(X==2)
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	19 f4       	brne	.+6      	; 0x716 <LCD_Send_XY+0x1e>
	{
		LOC = ROW1_START+(0x40)+Y-1;	
     710:	86 2f       	mov	r24, r22
     712:	81 54       	subi	r24, 0x41	; 65
     714:	07 c0       	rjmp	.+14     	; 0x724 <LCD_Send_XY+0x2c>
	}
	else if(X==3)
     716:	83 30       	cpi	r24, 0x03	; 3
     718:	19 f4       	brne	.+6      	; 0x720 <LCD_Send_XY+0x28>
	{
		LOC = ROW1_START+(0x14)+Y-1;
     71a:	86 2f       	mov	r24, r22
     71c:	8d 56       	subi	r24, 0x6D	; 109
     71e:	02 c0       	rjmp	.+4      	; 0x724 <LCD_Send_XY+0x2c>
	}
	else
	{
		LOC = ROW1_START+(0x54)+Y-1;
     720:	86 2f       	mov	r24, r22
     722:	8d 52       	subi	r24, 0x2D	; 45
	}
	LCD_SendCMD(LOC);
     724:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_SendCMD>
	LCD_SendString(String);
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_SendString>
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <LCD_vSendNumber>:


void LCD_vSendNumber(u16 Copy_u16Number)
{
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	2a 97       	sbiw	r28, 0x0a	; 10
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_Arr[10];
	u8 LOC_i=0;
	if(Copy_u16Number == 0)
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	21 f4       	brne	.+8      	; 0x756 <LCD_vSendNumber+0x22>
	{
		LCD_SendData('0');
     74e:	80 e3       	ldi	r24, 0x30	; 48
     750:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendData>
     754:	21 c0       	rjmp	.+66     	; 0x798 <LCD_vSendNumber+0x64>

void LCD_vSendNumber(u16 Copy_u16Number)
{
	u8 LOC_Arr[10];
	u8 LOC_i=0;
	if(Copy_u16Number == 0)
     756:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		while(Copy_u16Number != 0)
		{
			LOC_Arr[LOC_i] = Copy_u16Number%10;
     758:	2a e0       	ldi	r18, 0x0A	; 10
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	e1 e0       	ldi	r30, 0x01	; 1
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ec 0f       	add	r30, r28
     762:	fd 1f       	adc	r31, r29
     764:	e1 0f       	add	r30, r17
     766:	f1 1d       	adc	r31, r1
     768:	b9 01       	movw	r22, r18
     76a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__udivmodhi4>
     76e:	80 83       	st	Z, r24
			Copy_u16Number /= 10;
     770:	86 2f       	mov	r24, r22
     772:	97 2f       	mov	r25, r23
			LOC_i++;
     774:	1f 5f       	subi	r17, 0xFF	; 255
	{
		LCD_SendData('0');
	}
	else
	{
		while(Copy_u16Number != 0)
     776:	00 97       	sbiw	r24, 0x00	; 0
     778:	89 f7       	brne	.-30     	; 0x75c <LCD_vSendNumber+0x28>
		{
			LOC_Arr[LOC_i] = Copy_u16Number%10;
			Copy_u16Number /= 10;
			LOC_i++;
		}
		while(LOC_i>0)
     77a:	11 23       	and	r17, r17
     77c:	69 f0       	breq	.+26     	; 0x798 <LCD_vSendNumber+0x64>
		{
			LOC_i--;
     77e:	11 50       	subi	r17, 0x01	; 1
			LCD_SendData(LOC_Arr[LOC_i]+48);
     780:	e1 e0       	ldi	r30, 0x01	; 1
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ec 0f       	add	r30, r28
     786:	fd 1f       	adc	r31, r29
     788:	e1 0f       	add	r30, r17
     78a:	f1 1d       	adc	r31, r1
     78c:	80 81       	ld	r24, Z
     78e:	80 5d       	subi	r24, 0xD0	; 208
     790:	0e 94 24 03 	call	0x648	; 0x648 <LCD_SendData>
		{
			LOC_Arr[LOC_i] = Copy_u16Number%10;
			Copy_u16Number /= 10;
			LOC_i++;
		}
		while(LOC_i>0)
     794:	11 23       	and	r17, r17
     796:	99 f7       	brne	.-26     	; 0x77e <LCD_vSendNumber+0x4a>
		{
			LOC_i--;
			LCD_SendData(LOC_Arr[LOC_i]+48);
		}
	}
     798:	2a 96       	adiw	r28, 0x0a	; 10
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	08 95       	ret

000007ac <SRVM_voidOn>:
/* MCAL */
#include "../../MCAL/TMR1/TMR1_INTERFACE.h"


void SRVM_voidOn(u8 Copy_u8Angle)
{
     7ac:	cf 93       	push	r28
     7ae:	c8 2f       	mov	r28, r24
	f32 LOC_DutyCycle = ((Copy_u8Angle*5.0)/180)+5;
	/* TMR1 init at pwm mode 14 */
	TMR1_vInit();
     7b0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <TMR1_vInit>
	/* Set pwm fre. = 50 */
	TMR1_vSetFrequency_PWM(50);
     7b4:	82 e3       	ldi	r24, 0x32	; 50
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TMR1_vSetFrequency_PWM>
#include "../../MCAL/TMR1/TMR1_INTERFACE.h"


void SRVM_voidOn(u8 Copy_u8Angle)
{
	f32 LOC_DutyCycle = ((Copy_u8Angle*5.0)/180)+5;
     7bc:	6c 2f       	mov	r22, r28
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 ea       	ldi	r20, 0xA0	; 160
     7ce:	50 e4       	ldi	r21, 0x40	; 64
     7d0:	0e 94 80 08 	call	0x1100	; 0x1100 <__mulsf3>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	44 e3       	ldi	r20, 0x34	; 52
     7da:	53 e4       	ldi	r21, 0x43	; 67
     7dc:	0e 94 3a 07 	call	0xe74	; 0xe74 <__divsf3>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 ea       	ldi	r20, 0xA0	; 160
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	0e 94 d2 06 	call	0xda4	; 0xda4 <__addsf3>
	TMR1_vInit();
	/* Set pwm fre. = 50 */
	TMR1_vSetFrequency_PWM(50);
	/* Set pwm duty cycle between 5 : 10
	 depend on desired angle[0 : 180] */
	TMR1_vSetDutyCycle_PWM(LOC_DutyCycle);
     7ec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <TMR1_vSetDutyCycle_PWM>
	/* TMR1 start */
	TMR1_vStart();
     7f0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR1_vStart>
}
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <SRVM_voidOff>:


void SRVM_voidOff(void)
{
	/* TMR1 stop */
	TMR1_vStop();
     7f8:	0e 94 87 06 	call	0xd0e	; 0xd0e <TMR1_vStop>
     7fc:	08 95       	ret

000007fe <Dio_WriteChannel>:
 */ 
#include "DIO_INTERFACE.h"
/******************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
	switch(ChannelId/8)
     7fe:	98 2f       	mov	r25, r24
     800:	96 95       	lsr	r25
     802:	96 95       	lsr	r25
     804:	96 95       	lsr	r25
     806:	91 30       	cpi	r25, 0x01	; 1
     808:	31 f1       	breq	.+76     	; 0x856 <Dio_WriteChannel+0x58>
     80a:	91 30       	cpi	r25, 0x01	; 1
     80c:	38 f0       	brcs	.+14     	; 0x81c <Dio_WriteChannel+0x1e>
     80e:	92 30       	cpi	r25, 0x02	; 2
     810:	09 f4       	brne	.+2      	; 0x814 <Dio_WriteChannel+0x16>
     812:	40 c0       	rjmp	.+128    	; 0x894 <__stack+0x35>
     814:	93 30       	cpi	r25, 0x03	; 3
     816:	09 f0       	breq	.+2      	; 0x81a <Dio_WriteChannel+0x1c>
     818:	7a c0       	rjmp	.+244    	; 0x90e <__stack+0xaf>
     81a:	5b c0       	rjmp	.+182    	; 0x8d2 <__stack+0x73>
	{
		/* PortA */
		case 0:
		if(Level == 1){
     81c:	61 30       	cpi	r22, 0x01	; 1
     81e:	69 f4       	brne	.+26     	; 0x83a <Dio_WriteChannel+0x3c>
			SET_BIT(PORTA,ChannelId);
     820:	4b b3       	in	r20, 0x1b	; 27
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	b9 01       	movw	r22, r18
     828:	02 c0       	rjmp	.+4      	; 0x82e <Dio_WriteChannel+0x30>
     82a:	66 0f       	add	r22, r22
     82c:	77 1f       	adc	r23, r23
     82e:	8a 95       	dec	r24
     830:	e2 f7       	brpl	.-8      	; 0x82a <Dio_WriteChannel+0x2c>
     832:	cb 01       	movw	r24, r22
     834:	84 2b       	or	r24, r20
     836:	8b bb       	out	0x1b, r24	; 27
     838:	08 95       	ret
		}else {
			CLR_BIT(PORTA,ChannelId);
     83a:	4b b3       	in	r20, 0x1b	; 27
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	b9 01       	movw	r22, r18
     842:	02 c0       	rjmp	.+4      	; 0x848 <Dio_WriteChannel+0x4a>
     844:	66 0f       	add	r22, r22
     846:	77 1f       	adc	r23, r23
     848:	8a 95       	dec	r24
     84a:	e2 f7       	brpl	.-8      	; 0x844 <Dio_WriteChannel+0x46>
     84c:	cb 01       	movw	r24, r22
     84e:	80 95       	com	r24
     850:	84 23       	and	r24, r20
     852:	8b bb       	out	0x1b, r24	; 27
     854:	08 95       	ret
		}
		break;
		
		/* PortB */
		case 1:
		if(Level == 1){
     856:	61 30       	cpi	r22, 0x01	; 1
     858:	71 f4       	brne	.+28     	; 0x876 <__stack+0x17>
			SET_BIT(PORTB,ChannelId%8);
     85a:	48 b3       	in	r20, 0x18	; 24
     85c:	87 70       	andi	r24, 0x07	; 7
     85e:	21 e0       	ldi	r18, 0x01	; 1
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	b9 01       	movw	r22, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	66 0f       	add	r22, r22
     868:	77 1f       	adc	r23, r23
     86a:	8a 95       	dec	r24
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	cb 01       	movw	r24, r22
     870:	84 2b       	or	r24, r20
     872:	88 bb       	out	0x18, r24	; 24
     874:	08 95       	ret
		}else {
			CLR_BIT(PORTB,ChannelId%8);
     876:	48 b3       	in	r20, 0x18	; 24
     878:	87 70       	andi	r24, 0x07	; 7
     87a:	21 e0       	ldi	r18, 0x01	; 1
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	b9 01       	movw	r22, r18
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	66 0f       	add	r22, r22
     884:	77 1f       	adc	r23, r23
     886:	8a 95       	dec	r24
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	cb 01       	movw	r24, r22
     88c:	80 95       	com	r24
     88e:	84 23       	and	r24, r20
     890:	88 bb       	out	0x18, r24	; 24
     892:	08 95       	ret
		}
		break;
		
		/* PortC */
		case 2:
		if(Level == 1){
     894:	61 30       	cpi	r22, 0x01	; 1
     896:	71 f4       	brne	.+28     	; 0x8b4 <__stack+0x55>
			SET_BIT(PORTC,ChannelId%8);
     898:	45 b3       	in	r20, 0x15	; 21
     89a:	87 70       	andi	r24, 0x07	; 7
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	b9 01       	movw	r22, r18
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	8a 95       	dec	r24
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	cb 01       	movw	r24, r22
     8ae:	84 2b       	or	r24, r20
     8b0:	85 bb       	out	0x15, r24	; 21
     8b2:	08 95       	ret
		}else {
			CLR_BIT(PORTC,ChannelId%8);
     8b4:	45 b3       	in	r20, 0x15	; 21
     8b6:	87 70       	andi	r24, 0x07	; 7
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	b9 01       	movw	r22, r18
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	8a 95       	dec	r24
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
     8c8:	cb 01       	movw	r24, r22
     8ca:	80 95       	com	r24
     8cc:	84 23       	and	r24, r20
     8ce:	85 bb       	out	0x15, r24	; 21
     8d0:	08 95       	ret
		}
		break;
		
		/* PortD */
		case 3:
		if(Level == 1){
     8d2:	61 30       	cpi	r22, 0x01	; 1
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <__stack+0x93>
			SET_BIT(PORTD,ChannelId%8);
     8d6:	42 b3       	in	r20, 0x12	; 18
     8d8:	87 70       	andi	r24, 0x07	; 7
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	b9 01       	movw	r22, r18
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
     8e2:	66 0f       	add	r22, r22
     8e4:	77 1f       	adc	r23, r23
     8e6:	8a 95       	dec	r24
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
     8ea:	cb 01       	movw	r24, r22
     8ec:	84 2b       	or	r24, r20
     8ee:	82 bb       	out	0x12, r24	; 18
     8f0:	08 95       	ret
		}else {
			CLR_BIT(PORTD,ChannelId%8);
     8f2:	42 b3       	in	r20, 0x12	; 18
     8f4:	87 70       	andi	r24, 0x07	; 7
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	b9 01       	movw	r22, r18
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
     8fe:	66 0f       	add	r22, r22
     900:	77 1f       	adc	r23, r23
     902:	8a 95       	dec	r24
     904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
     906:	cb 01       	movw	r24, r22
     908:	80 95       	com	r24
     90a:	84 23       	and	r24, r20
     90c:	82 bb       	out	0x12, r24	; 18
     90e:	08 95       	ret

00000910 <Dio_ReadChannel>:
{
	/*volatile u8* PINs[4]={0x39,0x36,0x33,0x30};
	Dio_LevelType Ret = GET_BIT(*(volatile u8*)PINs[ChannelId/8],ChannelId%8);
	return Ret;*/
	Dio_LevelType Ret=0;
	switch(ChannelId/8)
     910:	98 2f       	mov	r25, r24
     912:	96 95       	lsr	r25
     914:	96 95       	lsr	r25
     916:	96 95       	lsr	r25
     918:	91 30       	cpi	r25, 0x01	; 1
     91a:	91 f0       	breq	.+36     	; 0x940 <Dio_ReadChannel+0x30>
     91c:	91 30       	cpi	r25, 0x01	; 1
     91e:	28 f0       	brcs	.+10     	; 0x92a <Dio_ReadChannel+0x1a>
     920:	92 30       	cpi	r25, 0x02	; 2
     922:	d1 f0       	breq	.+52     	; 0x958 <Dio_ReadChannel+0x48>
     924:	93 30       	cpi	r25, 0x03	; 3
     926:	81 f5       	brne	.+96     	; 0x988 <Dio_ReadChannel+0x78>
     928:	23 c0       	rjmp	.+70     	; 0x970 <Dio_ReadChannel+0x60>
	{
		case Dio_PORTA:
		Ret = GET_BIT(PINA,ChannelId);
     92a:	29 b3       	in	r18, 0x19	; 25
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	02 c0       	rjmp	.+4      	; 0x936 <Dio_ReadChannel+0x26>
     932:	55 95       	asr	r21
     934:	47 95       	ror	r20
     936:	8a 95       	dec	r24
     938:	e2 f7       	brpl	.-8      	; 0x932 <Dio_ReadChannel+0x22>
     93a:	ca 01       	movw	r24, r20
     93c:	81 70       	andi	r24, 0x01	; 1
		break;
     93e:	08 95       	ret
		
		case Dio_PORTB:
		Ret = GET_BIT(PINB,ChannelId%8);
     940:	26 b3       	in	r18, 0x16	; 22
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	87 70       	andi	r24, 0x07	; 7
     946:	a9 01       	movw	r20, r18
     948:	02 c0       	rjmp	.+4      	; 0x94e <Dio_ReadChannel+0x3e>
     94a:	55 95       	asr	r21
     94c:	47 95       	ror	r20
     94e:	8a 95       	dec	r24
     950:	e2 f7       	brpl	.-8      	; 0x94a <Dio_ReadChannel+0x3a>
     952:	ca 01       	movw	r24, r20
     954:	81 70       	andi	r24, 0x01	; 1
		break;
     956:	08 95       	ret
		
		case Dio_PORTC:
		Ret = GET_BIT(PINC,ChannelId%8);
     958:	23 b3       	in	r18, 0x13	; 19
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	87 70       	andi	r24, 0x07	; 7
     95e:	a9 01       	movw	r20, r18
     960:	02 c0       	rjmp	.+4      	; 0x966 <Dio_ReadChannel+0x56>
     962:	55 95       	asr	r21
     964:	47 95       	ror	r20
     966:	8a 95       	dec	r24
     968:	e2 f7       	brpl	.-8      	; 0x962 <Dio_ReadChannel+0x52>
     96a:	ca 01       	movw	r24, r20
     96c:	81 70       	andi	r24, 0x01	; 1
		break;
     96e:	08 95       	ret
		
		case Dio_PORTD:
		Ret = GET_BIT(PIND,ChannelId%8);
     970:	20 b3       	in	r18, 0x10	; 16
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	87 70       	andi	r24, 0x07	; 7
     976:	a9 01       	movw	r20, r18
     978:	02 c0       	rjmp	.+4      	; 0x97e <Dio_ReadChannel+0x6e>
     97a:	55 95       	asr	r21
     97c:	47 95       	ror	r20
     97e:	8a 95       	dec	r24
     980:	e2 f7       	brpl	.-8      	; 0x97a <Dio_ReadChannel+0x6a>
     982:	ca 01       	movw	r24, r20
     984:	81 70       	andi	r24, 0x01	; 1
		break;
     986:	08 95       	ret
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
	/*volatile u8* PINs[4]={0x39,0x36,0x33,0x30};
	Dio_LevelType Ret = GET_BIT(*(volatile u8*)PINs[ChannelId/8],ChannelId%8);
	return Ret;*/
	Dio_LevelType Ret=0;
     988:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
		break;
	}
	return Ret;
}
     98a:	08 95       	ret

0000098c <Dio_ReadPort>:
/*******************************************************************************************/
Dio_PortLevelType Dio_ReadPort(Dio_PortType PortId)
{
	Dio_PortLevelType Ret;
	switch(PortId)
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	49 f0       	breq	.+18     	; 0x9a2 <Dio_ReadPort+0x16>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	28 f0       	brcs	.+10     	; 0x99e <Dio_ReadPort+0x12>
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	39 f0       	breq	.+14     	; 0x9a6 <Dio_ReadPort+0x1a>
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	41 f4       	brne	.+16     	; 0x9ac <Dio_ReadPort+0x20>
     99c:	06 c0       	rjmp	.+12     	; 0x9aa <Dio_ReadPort+0x1e>
	{
		case Dio_PORTA:
			Ret = PINA;
     99e:	89 b3       	in	r24, 0x19	; 25
			break;
     9a0:	08 95       	ret
		
		case Dio_PORTB:
			Ret = PINB;
     9a2:	86 b3       	in	r24, 0x16	; 22
			break;
     9a4:	08 95       	ret
			
		case Dio_PORTC:
			Ret = PINC;
     9a6:	83 b3       	in	r24, 0x13	; 19
			break;
     9a8:	08 95       	ret
			
		case Dio_PORTD:
			Ret = PIND;
     9aa:	80 b3       	in	r24, 0x10	; 16
			break;
			
		default:
			break;
	}
}
     9ac:	08 95       	ret

000009ae <Dio_WritePort>:
/*******************************************************************************************/
void Dio_WritePort(Dio_PortType PortId,Dio_PortLevelType Level)
{
	switch(PortId)
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	49 f0       	breq	.+18     	; 0x9c4 <Dio_WritePort+0x16>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <Dio_WritePort+0x12>
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <Dio_WritePort+0x1a>
     9ba:	83 30       	cpi	r24, 0x03	; 3
     9bc:	41 f4       	brne	.+16     	; 0x9ce <Dio_WritePort+0x20>
     9be:	06 c0       	rjmp	.+12     	; 0x9cc <Dio_WritePort+0x1e>
	{
		case Dio_PORTA:
		PORTA = Level;
     9c0:	6b bb       	out	0x1b, r22	; 27
		break;
     9c2:	08 95       	ret
		
		case Dio_PORTB:
		PORTB = Level;
     9c4:	68 bb       	out	0x18, r22	; 24
		break;
     9c6:	08 95       	ret
		
		case Dio_PORTC:
		PORTC = Level;
     9c8:	65 bb       	out	0x15, r22	; 21
		break;
     9ca:	08 95       	ret
		
		case Dio_PORTD:
		PORTD = Level;
     9cc:	62 bb       	out	0x12, r22	; 18
     9ce:	08 95       	ret

000009d0 <Dio_FlipChannel>:

/*******************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
	Dio_LevelType Ret=0;
	switch(ChannelId/8)
     9d0:	98 2f       	mov	r25, r24
     9d2:	96 95       	lsr	r25
     9d4:	96 95       	lsr	r25
     9d6:	96 95       	lsr	r25
     9d8:	91 30       	cpi	r25, 0x01	; 1
     9da:	f9 f0       	breq	.+62     	; 0xa1a <Dio_FlipChannel+0x4a>
     9dc:	91 30       	cpi	r25, 0x01	; 1
     9de:	30 f0       	brcs	.+12     	; 0x9ec <Dio_FlipChannel+0x1c>
     9e0:	92 30       	cpi	r25, 0x02	; 2
     9e2:	a9 f1       	breq	.+106    	; 0xa4e <Dio_FlipChannel+0x7e>
     9e4:	93 30       	cpi	r25, 0x03	; 3
     9e6:	09 f0       	breq	.+2      	; 0x9ea <Dio_FlipChannel+0x1a>
     9e8:	66 c0       	rjmp	.+204    	; 0xab6 <Dio_FlipChannel+0xe6>
     9ea:	4b c0       	rjmp	.+150    	; 0xa82 <Dio_FlipChannel+0xb2>
	{
		case Dio_PORTA:
			TOG_BIT(PORTA,ChannelId);
     9ec:	9b b3       	in	r25, 0x1b	; 27
     9ee:	41 e0       	ldi	r20, 0x01	; 1
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	9a 01       	movw	r18, r20
     9f4:	08 2e       	mov	r0, r24
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <Dio_FlipChannel+0x2c>
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <Dio_FlipChannel+0x28>
     a00:	29 27       	eor	r18, r25
     a02:	2b bb       	out	0x1b, r18	; 27
			Ret = GET_BIT(PORTA,ChannelId);
     a04:	2b b3       	in	r18, 0x1b	; 27
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	a9 01       	movw	r20, r18
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <Dio_FlipChannel+0x40>
     a0c:	55 95       	asr	r21
     a0e:	47 95       	ror	r20
     a10:	8a 95       	dec	r24
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <Dio_FlipChannel+0x3c>
     a14:	ca 01       	movw	r24, r20
     a16:	81 70       	andi	r24, 0x01	; 1
			break;
     a18:	08 95       	ret
		
		case Dio_PORTB:
			TOG_BIT(PORTB,ChannelId%8);
     a1a:	68 b3       	in	r22, 0x18	; 24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	87 70       	andi	r24, 0x07	; 7
     a20:	90 70       	andi	r25, 0x00	; 0
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	9a 01       	movw	r18, r20
     a28:	08 2e       	mov	r0, r24
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <Dio_FlipChannel+0x60>
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	0a 94       	dec	r0
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <Dio_FlipChannel+0x5c>
     a34:	26 27       	eor	r18, r22
     a36:	28 bb       	out	0x18, r18	; 24
			Ret = GET_BIT(PORTB,ChannelId%8);
     a38:	28 b3       	in	r18, 0x18	; 24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	a9 01       	movw	r20, r18
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <Dio_FlipChannel+0x74>
     a40:	55 95       	asr	r21
     a42:	47 95       	ror	r20
     a44:	8a 95       	dec	r24
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <Dio_FlipChannel+0x70>
     a48:	ca 01       	movw	r24, r20
     a4a:	81 70       	andi	r24, 0x01	; 1
			break;
     a4c:	08 95       	ret
		
		case Dio_PORTC:
			TOG_BIT(PORTC,ChannelId%8);
     a4e:	65 b3       	in	r22, 0x15	; 21
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	87 70       	andi	r24, 0x07	; 7
     a54:	90 70       	andi	r25, 0x00	; 0
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	9a 01       	movw	r18, r20
     a5c:	08 2e       	mov	r0, r24
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <Dio_FlipChannel+0x94>
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	0a 94       	dec	r0
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <Dio_FlipChannel+0x90>
     a68:	26 27       	eor	r18, r22
     a6a:	25 bb       	out	0x15, r18	; 21
			Ret = GET_BIT(PORTC,ChannelId%8);
     a6c:	25 b3       	in	r18, 0x15	; 21
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	a9 01       	movw	r20, r18
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <Dio_FlipChannel+0xa8>
     a74:	55 95       	asr	r21
     a76:	47 95       	ror	r20
     a78:	8a 95       	dec	r24
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <Dio_FlipChannel+0xa4>
     a7c:	ca 01       	movw	r24, r20
     a7e:	81 70       	andi	r24, 0x01	; 1
			break;
     a80:	08 95       	ret
		
		case Dio_PORTD:
			TOG_BIT(PORTD,ChannelId%8);
     a82:	62 b3       	in	r22, 0x12	; 18
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	87 70       	andi	r24, 0x07	; 7
     a88:	90 70       	andi	r25, 0x00	; 0
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	9a 01       	movw	r18, r20
     a90:	08 2e       	mov	r0, r24
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <Dio_FlipChannel+0xc8>
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	0a 94       	dec	r0
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <Dio_FlipChannel+0xc4>
     a9c:	26 27       	eor	r18, r22
     a9e:	22 bb       	out	0x12, r18	; 18
			Ret = GET_BIT(PORTD,ChannelId%8);
     aa0:	22 b3       	in	r18, 0x12	; 18
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	a9 01       	movw	r20, r18
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <Dio_FlipChannel+0xdc>
     aa8:	55 95       	asr	r21
     aaa:	47 95       	ror	r20
     aac:	8a 95       	dec	r24
     aae:	e2 f7       	brpl	.-8      	; 0xaa8 <Dio_FlipChannel+0xd8>
     ab0:	ca 01       	movw	r24, r20
     ab2:	81 70       	andi	r24, 0x01	; 1
			break;
     ab4:	08 95       	ret
}

/*******************************************************************************************/
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
	Dio_LevelType Ret=0;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
		
		default:
			break;
	}
	return Ret;
}
     ab8:	08 95       	ret

00000aba <TWI_vInitMaster>:
#include "I2C_PRIVATE.h"
/*********************************************************************************/

void TWI_vInitMaster(u8 Copy_u8Address)
{
	if((Copy_u8Address < 128) && (Copy_u8Address > 0)) // address for master is optional
     aba:	18 16       	cp	r1, r24
     abc:	14 f4       	brge	.+4      	; 0xac2 <TWI_vInitMaster+0x8>
	{
		TWAR = Copy_u8Address<<1 ;
     abe:	88 0f       	add	r24, r24
     ac0:	82 b9       	out	0x02, r24	; 2
	}
	//Choose SCL frequency= 400 kHz
	TWBR = 12;
     ac2:	8c e0       	ldi	r24, 0x0C	; 12
     ac4:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR,TWPS0);
     ac6:	08 98       	cbi	0x01, 0	; 1
	CLR_BIT(TWSR,TWPS1);
     ac8:	09 98       	cbi	0x01, 1	; 1
	
	//Enable ACK
	SET_BIT(TWCR,TWEA);
     aca:	86 b7       	in	r24, 0x36	; 54
     acc:	80 64       	ori	r24, 0x40	; 64
     ace:	86 bf       	out	0x36, r24	; 54
	
	//Enable TWI Peripheral
	SET_BIT(TWCR,TWEN);
     ad0:	86 b7       	in	r24, 0x36	; 54
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	86 bf       	out	0x36, r24	; 54
}
     ad6:	08 95       	ret

00000ad8 <TWI_vSendStartCondition>:
/*********************************************************************************/

void TWI_vSendStartCondition(void)
{
	//Request a Start condition
	SET_BIT(TWCR,TWSTA);
     ad8:	86 b7       	in	r24, 0x36	; 54
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	86 bf       	out	0x36, r24	; 54
	
	//Clear flag for start condition
	SET_BIT(TWCR,TWINT);
     ade:	86 b7       	in	r24, 0x36	; 54
     ae0:	80 68       	ori	r24, 0x80	; 128
     ae2:	86 bf       	out	0x36, r24	; 54
	
	//Busy Wait for the flag 
	while(GET_BIT(TWCR,TWINT) == 0);
     ae4:	06 b6       	in	r0, 0x36	; 54
     ae6:	07 fe       	sbrs	r0, 7
     ae8:	fd cf       	rjmp	.-6      	; 0xae4 <TWI_vSendStartCondition+0xc>
	
	//Check Status Code == Start Cond. ACK
	while(TWI_STATUS_VALUE != TWI_START_COND_ACK);
     aea:	81 b1       	in	r24, 0x01	; 1
     aec:	88 7f       	andi	r24, 0xF8	; 248
     aee:	88 30       	cpi	r24, 0x08	; 8
     af0:	e1 f7       	brne	.-8      	; 0xaea <TWI_vSendStartCondition+0x12>
}
     af2:	08 95       	ret

00000af4 <TWI_vSendRepStartCondition>:
/*********************************************************************************/

void TWI_vSendRepStartCondition(void)
{
	//Request a Start condition
	SET_BIT(TWCR,TWSTA);
     af4:	86 b7       	in	r24, 0x36	; 54
     af6:	80 62       	ori	r24, 0x20	; 32
     af8:	86 bf       	out	0x36, r24	; 54
	
	//Clear flag for start condition
	SET_BIT(TWCR,TWINT);
     afa:	86 b7       	in	r24, 0x36	; 54
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	86 bf       	out	0x36, r24	; 54
	
	//Busy Wait for the flag
	while(GET_BIT(TWCR,TWINT) == 0);
     b00:	06 b6       	in	r0, 0x36	; 54
     b02:	07 fe       	sbrs	r0, 7
     b04:	fd cf       	rjmp	.-6      	; 0xb00 <TWI_vSendRepStartCondition+0xc>
	
	//Check Status Code == Repeated Start Cond. ACK
	while(TWI_STATUS_VALUE != TWI_REP_START_COND_ACK);
     b06:	81 b1       	in	r24, 0x01	; 1
     b08:	88 7f       	andi	r24, 0xF8	; 248
     b0a:	80 31       	cpi	r24, 0x10	; 16
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <TWI_vSendRepStartCondition+0x12>
}
     b0e:	08 95       	ret

00000b10 <TWI_vSendStopCondition>:
/*********************************************************************************/

void TWI_vSendStopCondition(void)
{
	//Request a Stop Condition
	SET_BIT(TWCR,TWSTO);
     b10:	86 b7       	in	r24, 0x36	; 54
     b12:	80 61       	ori	r24, 0x10	; 16
     b14:	86 bf       	out	0x36, r24	; 54
	
	//Clear flag for Stop Condition
	SET_BIT(TWCR,TWINT);
     b16:	86 b7       	in	r24, 0x36	; 54
     b18:	80 68       	ori	r24, 0x80	; 128
     b1a:	86 bf       	out	0x36, r24	; 54
}
     b1c:	08 95       	ret

00000b1e <TWI_vSendSlaveAddressWithWrite>:
/*********************************************************************************/

void TWI_vSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
	if(Copy_u8SlaveAddress < 128) //validation 
     b1e:	88 23       	and	r24, r24
     b20:	84 f0       	brlt	.+32     	; 0xb42 <TWI_vSendSlaveAddressWithWrite+0x24>
	{
		TWDR = Copy_u8SlaveAddress<<1 ;
     b22:	88 0f       	add	r24, r24
     b24:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR,0); // Clear BIT0 For Write Operation
     b26:	18 98       	cbi	0x03, 0	; 3
		
		//Clear Start Condition Bit
		CLR_BIT(TWCR,TWSTA);
     b28:	86 b7       	in	r24, 0x36	; 54
     b2a:	8f 7d       	andi	r24, 0xDF	; 223
     b2c:	86 bf       	out	0x36, r24	; 54
		
		//Clear flag for Sending Address + R/W Bit
		SET_BIT(TWCR,TWINT);
     b2e:	86 b7       	in	r24, 0x36	; 54
     b30:	80 68       	ori	r24, 0x80	; 128
     b32:	86 bf       	out	0x36, r24	; 54
		
		//Busy Wait for the flag
		while(GET_BIT(TWCR,TWINT) == 0);
     b34:	06 b6       	in	r0, 0x36	; 54
     b36:	07 fe       	sbrs	r0, 7
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <TWI_vSendSlaveAddressWithWrite+0x16>
		
		//Check Status Code == Start Cond. ACK
		while(TWI_STATUS_VALUE != TWI_SLA_WRITE_ACK);
     b3a:	81 b1       	in	r24, 0x01	; 1
     b3c:	88 7f       	andi	r24, 0xF8	; 248
     b3e:	88 31       	cpi	r24, 0x18	; 24
     b40:	e1 f7       	brne	.-8      	; 0xb3a <TWI_vSendSlaveAddressWithWrite+0x1c>
     b42:	08 95       	ret

00000b44 <TWI_vSendSlaveAddressWithRead>:
}
/*********************************************************************************/

void TWI_vSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
	if(Copy_u8SlaveAddress < 128) //validation
     b44:	88 23       	and	r24, r24
     b46:	84 f0       	brlt	.+32     	; 0xb68 <TWI_vSendSlaveAddressWithRead+0x24>
	{
		TWDR = Copy_u8SlaveAddress<<1 ;
     b48:	88 0f       	add	r24, r24
     b4a:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR,0); // Set BIT0 For Read Operation
     b4c:	18 9a       	sbi	0x03, 0	; 3
		
		//Clear Start Condition Bit
		CLR_BIT(TWCR,TWSTA);
     b4e:	86 b7       	in	r24, 0x36	; 54
     b50:	8f 7d       	andi	r24, 0xDF	; 223
     b52:	86 bf       	out	0x36, r24	; 54
		
		//Clear flag for Sending Address + R/W Bit
		SET_BIT(TWCR,TWINT);
     b54:	86 b7       	in	r24, 0x36	; 54
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	86 bf       	out	0x36, r24	; 54
		
		//Busy Wait for the flag
		while(GET_BIT(TWCR,TWINT) == 0);
     b5a:	06 b6       	in	r0, 0x36	; 54
     b5c:	07 fe       	sbrs	r0, 7
     b5e:	fd cf       	rjmp	.-6      	; 0xb5a <TWI_vSendSlaveAddressWithRead+0x16>
		
		//Check Status Code == Slave Address+READ bit ACK
		while(TWI_STATUS_VALUE != TWI_SLA_READ_ACK);
     b60:	81 b1       	in	r24, 0x01	; 1
     b62:	88 7f       	andi	r24, 0xF8	; 248
     b64:	80 34       	cpi	r24, 0x40	; 64
     b66:	e1 f7       	brne	.-8      	; 0xb60 <TWI_vSendSlaveAddressWithRead+0x1c>
     b68:	08 95       	ret

00000b6a <TWI_vWriteMasterDataByte>:
}
/*********************************************************************************/

void TWI_vWriteMasterDataByte(u8 Copy_u8TxData)
{
	TWDR = Copy_u8TxData;
     b6a:	83 b9       	out	0x03, r24	; 3
	
	//Clear flag for Sending Data
	SET_BIT(TWCR,TWINT);
     b6c:	86 b7       	in	r24, 0x36	; 54
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	86 bf       	out	0x36, r24	; 54
	
	//Busy Wait for the flag
	while(GET_BIT(TWCR,TWINT) == 0);
     b72:	06 b6       	in	r0, 0x36	; 54
     b74:	07 fe       	sbrs	r0, 7
     b76:	fd cf       	rjmp	.-6      	; 0xb72 <TWI_vWriteMasterDataByte+0x8>
	
	//Check Status Code == Start Cond. ACK
	while(TWI_STATUS_VALUE != TWI_MASTER_DATA_TX_ACK);
     b78:	81 b1       	in	r24, 0x01	; 1
     b7a:	88 7f       	andi	r24, 0xF8	; 248
     b7c:	88 32       	cpi	r24, 0x28	; 40
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <TWI_vWriteMasterDataByte+0xe>
	
}
     b80:	08 95       	ret

00000b82 <TWI_vReadMasterDataByte>:
/*********************************************************************************/

void TWI_vReadMasterDataByte(u8* Copy_pu8RxData,u8 Copy_u8AckNack)
{
	if(Copy_pu8RxData != NULL)
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	e9 f0       	breq	.+58     	; 0xbc0 <TWI_vReadMasterDataByte+0x3e>
	{
		if(Copy_u8AckNack == TWI_DATA_RX_NACK)
     b86:	61 30       	cpi	r22, 0x01	; 1
     b88:	21 f4       	brne	.+8      	; 0xb92 <TWI_vReadMasterDataByte+0x10>
		{
			CLR_BIT(TWCR,TWEA);
     b8a:	26 b7       	in	r18, 0x36	; 54
     b8c:	2f 7b       	andi	r18, 0xBF	; 191
     b8e:	26 bf       	out	0x36, r18	; 54
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <TWI_vReadMasterDataByte+0x16>
		}
		else
		{
			SET_BIT(TWCR,TWEA);
     b92:	26 b7       	in	r18, 0x36	; 54
     b94:	20 64       	ori	r18, 0x40	; 64
     b96:	26 bf       	out	0x36, r18	; 54
		}
		//Clear flag for Sending Data
		SET_BIT(TWCR,TWINT);
     b98:	26 b7       	in	r18, 0x36	; 54
     b9a:	20 68       	ori	r18, 0x80	; 128
     b9c:	26 bf       	out	0x36, r18	; 54
		
		//Busy Wait for the flag
		while(GET_BIT(TWCR,TWINT) == 0);
     b9e:	06 b6       	in	r0, 0x36	; 54
     ba0:	07 fe       	sbrs	r0, 7
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <TWI_vReadMasterDataByte+0x1c>
		
		if(Copy_u8AckNack == TWI_DATA_RX_NACK)
     ba4:	61 30       	cpi	r22, 0x01	; 1
     ba6:	29 f4       	brne	.+10     	; 0xbb2 <TWI_vReadMasterDataByte+0x30>
		{
			//Check Status Code == Start Cond. NACK
			while(TWI_STATUS_VALUE != TWI_MASTER_DATA_RX_NACK);
     ba8:	21 b1       	in	r18, 0x01	; 1
     baa:	28 7f       	andi	r18, 0xF8	; 248
     bac:	28 35       	cpi	r18, 0x58	; 88
     bae:	e1 f7       	brne	.-8      	; 0xba8 <TWI_vReadMasterDataByte+0x26>
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <TWI_vReadMasterDataByte+0x38>
		}
		else
		{
			//Check Status Code == Start Cond. ACK
			while(TWI_STATUS_VALUE != TWI_MASTER_DATA_RX_ACK);
     bb2:	21 b1       	in	r18, 0x01	; 1
     bb4:	28 7f       	andi	r18, 0xF8	; 248
     bb6:	20 35       	cpi	r18, 0x50	; 80
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <TWI_vReadMasterDataByte+0x30>
		}
		
		*Copy_pu8RxData = TWDR;
     bba:	23 b1       	in	r18, 0x03	; 3
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
     bc0:	08 95       	ret

00000bc2 <Port_Init>:

extern Port_ConfigType Port_cngs[MAX_NUMBER_OF_PINS];

/*******************************************************************************************/
void Port_Init(void)
{
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	25 e0       	ldi	r18, 0x05	; 5
     bc8:	31 e0       	ldi	r19, 0x01	; 1
     bca:	e9 01       	movw	r28, r18
     bcc:	21 96       	adiw	r28, 0x01	; 1
#include "PORT_TYPES.h"

extern Port_ConfigType Port_cngs[MAX_NUMBER_OF_PINS];

/*******************************************************************************************/
void Port_Init(void)
     bce:	45 e6       	ldi	r20, 0x65	; 101
     bd0:	51 e0       	ldi	r21, 0x01	; 1
				
			case Dio_PORTB:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
					SET_BIT(DDRB,Port_cngs[i].Pin);
				}else {
					CLR_BIT(DDRB,Port_cngs[i].Pin);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
#include "PORT_TYPES.h"

extern Port_ConfigType Port_cngs[MAX_NUMBER_OF_PINS];

/*******************************************************************************************/
void Port_Init(void)
     bd6:	d9 01       	movw	r26, r18
     bd8:	f9 01       	movw	r30, r18
     bda:	31 97       	sbiw	r30, 0x01	; 1
	{
		if(Port_cngs[i].Port==-1)
		{
			break;
		}
		switch(Port_cngs[i].Port)
     bdc:	80 81       	ld	r24, Z
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	11 f1       	breq	.+68     	; 0xc26 <Port_Init+0x64>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	30 f0       	brcs	.+12     	; 0xbf2 <Port_Init+0x30>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	c1 f1       	breq	.+112    	; 0xc5a <Port_Init+0x98>
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	09 f0       	breq	.+2      	; 0xbf0 <Port_Init+0x2e>
     bee:	68 c0       	rjmp	.+208    	; 0xcc0 <Port_Init+0xfe>
     bf0:	4e c0       	rjmp	.+156    	; 0xc8e <Port_Init+0xcc>
		{
			case Dio_PORTA:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
     bf2:	88 81       	ld	r24, Y
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	59 f4       	brne	.+22     	; 0xc0e <Port_Init+0x4c>
					SET_BIT(DDRA,Port_cngs[i].Pin);
     bf8:	ea b3       	in	r30, 0x1a	; 26
     bfa:	cb 01       	movw	r24, r22
     bfc:	0c 90       	ld	r0, X
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <Port_Init+0x42>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <Port_Init+0x3e>
     c08:	8e 2b       	or	r24, r30
     c0a:	8a bb       	out	0x1a, r24	; 26
     c0c:	59 c0       	rjmp	.+178    	; 0xcc0 <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRA,Port_cngs[i].Pin);
     c0e:	ea b3       	in	r30, 0x1a	; 26
     c10:	cb 01       	movw	r24, r22
     c12:	0c 90       	ld	r0, X
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <Port_Init+0x58>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <Port_Init+0x54>
     c1e:	80 95       	com	r24
     c20:	8e 23       	and	r24, r30
     c22:	8a bb       	out	0x1a, r24	; 26
     c24:	4d c0       	rjmp	.+154    	; 0xcc0 <Port_Init+0xfe>
				}
				break;
				
			case Dio_PORTB:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
     c26:	88 81       	ld	r24, Y
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	59 f4       	brne	.+22     	; 0xc42 <Port_Init+0x80>
					SET_BIT(DDRB,Port_cngs[i].Pin);
     c2c:	e7 b3       	in	r30, 0x17	; 23
     c2e:	cb 01       	movw	r24, r22
     c30:	0c 90       	ld	r0, X
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <Port_Init+0x76>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <Port_Init+0x72>
     c3c:	8e 2b       	or	r24, r30
     c3e:	87 bb       	out	0x17, r24	; 23
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRB,Port_cngs[i].Pin);
     c42:	e7 b3       	in	r30, 0x17	; 23
     c44:	cb 01       	movw	r24, r22
     c46:	0c 90       	ld	r0, X
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <Port_Init+0x8c>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <Port_Init+0x88>
     c52:	80 95       	com	r24
     c54:	8e 23       	and	r24, r30
     c56:	87 bb       	out	0x17, r24	; 23
     c58:	33 c0       	rjmp	.+102    	; 0xcc0 <Port_Init+0xfe>
				}
				break;
				
			case Dio_PORTC:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
     c5a:	88 81       	ld	r24, Y
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	59 f4       	brne	.+22     	; 0xc76 <Port_Init+0xb4>
					SET_BIT(DDRC,Port_cngs[i].Pin);
     c60:	e4 b3       	in	r30, 0x14	; 20
     c62:	cb 01       	movw	r24, r22
     c64:	0c 90       	ld	r0, X
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <Port_Init+0xaa>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <Port_Init+0xa6>
     c70:	8e 2b       	or	r24, r30
     c72:	84 bb       	out	0x14, r24	; 20
     c74:	25 c0       	rjmp	.+74     	; 0xcc0 <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRC,Port_cngs[i].Pin);
     c76:	e4 b3       	in	r30, 0x14	; 20
     c78:	cb 01       	movw	r24, r22
     c7a:	0c 90       	ld	r0, X
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <Port_Init+0xc0>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <Port_Init+0xbc>
     c86:	80 95       	com	r24
     c88:	8e 23       	and	r24, r30
     c8a:	84 bb       	out	0x14, r24	; 20
     c8c:	19 c0       	rjmp	.+50     	; 0xcc0 <Port_Init+0xfe>
				}
				break;
				
			case Dio_PORTD:
				if(Port_cngs[i].Dir==PORT_PIN_OUT){
     c8e:	88 81       	ld	r24, Y
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	59 f4       	brne	.+22     	; 0xcaa <Port_Init+0xe8>
					SET_BIT(DDRD,Port_cngs[i].Pin);
     c94:	e1 b3       	in	r30, 0x11	; 17
     c96:	cb 01       	movw	r24, r22
     c98:	0c 90       	ld	r0, X
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <Port_Init+0xde>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <Port_Init+0xda>
     ca4:	8e 2b       	or	r24, r30
     ca6:	81 bb       	out	0x11, r24	; 17
     ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <Port_Init+0xfe>
				}else {
					CLR_BIT(DDRD,Port_cngs[i].Pin);
     caa:	e1 b3       	in	r30, 0x11	; 17
     cac:	cb 01       	movw	r24, r22
     cae:	0c 90       	ld	r0, X
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <Port_Init+0xf4>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <Port_Init+0xf0>
     cba:	80 95       	com	r24
     cbc:	8e 23       	and	r24, r30
     cbe:	81 bb       	out	0x11, r24	; 17
     cc0:	2d 5f       	subi	r18, 0xFD	; 253
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	23 96       	adiw	r28, 0x03	; 3

/*******************************************************************************************/
void Port_Init(void)
{
	u8 i=0;
	for(i=0 ; i<MAX_NUMBER_OF_PINS ; i++)
     cc6:	24 17       	cp	r18, r20
     cc8:	35 07       	cpc	r19, r21
     cca:	09 f0       	breq	.+2      	; 0xcce <Port_Init+0x10c>
     ccc:	84 cf       	rjmp	.-248    	; 0xbd6 <Port_Init+0x14>
				
			default:
				break;
		}
	}
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <TMR1_vInit>:
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	
	#elif TMR1_MODE == TMR1_FAST_PWM_ICR1
	//Select Fast PWM with top value ICR1 Mode
	CLR_BIT(TCCR1A,WGM10);
     cd4:	8f b5       	in	r24, 0x2f	; 47
     cd6:	8e 7f       	andi	r24, 0xFE	; 254
     cd8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
     cda:	8f b5       	in	r24, 0x2f	; 47
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
     ce0:	8e b5       	in	r24, 0x2e	; 46
     ce2:	88 60       	ori	r24, 0x08	; 8
     ce4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
     ce6:	8e b5       	in	r24, 0x2e	; 46
     ce8:	80 61       	ori	r24, 0x10	; 16
     cea:	8e bd       	out	0x2e, r24	; 46
	#if TMR1_PWM_MODE == TMR1_PWM_INVERTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
	
	#elif TMR1_PWM_MODE == TMR1_PWM_NONINVERTING
	CLR_BIT(TCCR1A,COM1A0);
     cec:	8f b5       	in	r24, 0x2f	; 47
     cee:	8f 7b       	andi	r24, 0xBF	; 191
     cf0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
     cf2:	8f b5       	in	r24, 0x2f	; 47
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	
	#endif
}
     cf8:	08 95       	ret

00000cfa <TMR1_vStart>:
	CLR_BIT(TCCR1B,CS10);
	SET_BIT(TCCR1B,CS11);
	CLR_BIT(TCCR1B,CS12);
	
	#elif TMR1_PRESCALAR_SEL == TMR1_PRESCALAR_64
	SET_BIT(TCCR1B,CS10);
     cfa:	8e b5       	in	r24, 0x2e	; 46
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
     d00:	8e b5       	in	r24, 0x2e	; 46
     d02:	82 60       	ori	r24, 0x02	; 2
     d04:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
     d06:	8e b5       	in	r24, 0x2e	; 46
     d08:	8b 7f       	andi	r24, 0xFB	; 251
     d0a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS10);
	CLR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS12);
	
	#endif
}
     d0c:	08 95       	ret

00000d0e <TMR1_vStop>:

/******************************************************************************************************/
void TMR1_vStop(void)
{
	TCCR1B &= ~(0x07);
     d0e:	8e b5       	in	r24, 0x2e	; 46
     d10:	88 7f       	andi	r24, 0xF8	; 248
     d12:	8e bd       	out	0x2e, r24	; 46
}
     d14:	08 95       	ret

00000d16 <TMR1_vSetCompareMatchValue_A>:

/******************************************************************************************************/

void TMR1_vSetCompareMatchValue_A(u16 Copy_u16CompValueA)
{
	OCR1A = Copy_u16CompValueA;
     d16:	9b bd       	out	0x2b, r25	; 43
     d18:	8a bd       	out	0x2a, r24	; 42
}
     d1a:	08 95       	ret

00000d1c <TMR1_vSetDutyCycle_PWM>:

/******************************************************************************************************/

void TMR1_vSetDutyCycle_PWM(f32 Copy_f32Duty)
{
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	6b 01       	movw	r12, r22
     d26:	7c 01       	movw	r14, r24
	if(Copy_f32Duty <= 100)
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	48 ec       	ldi	r20, 0xC8	; 200
     d2e:	52 e4       	ldi	r21, 0x42	; 66
     d30:	0e 94 36 07 	call	0xe6c	; 0xe6c <__cmpsf2>
     d34:	18 16       	cp	r1, r24
     d36:	f4 f0       	brlt	.+60     	; 0xd74 <TMR1_vSetDutyCycle_PWM+0x58>
		#if TMR1_PWM_MODE == TMR1_PWM_INVERTING
		Copy_f32Duty = 100 - Copy_f32Duty;
		OCR1A = ((Copy_f32Duty*(ICR1+1))/100)-1;
		
		#elif TMR1_PWM_MODE == TMR1_PWM_NONINVERTING
		OCR1A = ((Copy_f32Duty*(ICR1+1))/100)-1;
     d38:	66 b5       	in	r22, 0x26	; 38
     d3a:	77 b5       	in	r23, 0x27	; 39
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
     d48:	a7 01       	movw	r20, r14
     d4a:	96 01       	movw	r18, r12
     d4c:	0e 94 80 08 	call	0x1100	; 0x1100 <__mulsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	48 ec       	ldi	r20, 0xC8	; 200
     d56:	52 e4       	ldi	r21, 0x42	; 66
     d58:	0e 94 3a 07 	call	0xe74	; 0xe74 <__divsf3>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 d1 06 	call	0xda2	; 0xda2 <__subsf3>
     d68:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9b bd       	out	0x2b, r25	; 43
     d72:	8a bd       	out	0x2a, r24	; 42
		
		#endif
		#endif
		
	}
}
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	08 95       	ret

00000d7e <TMR1_vSetFrequency_PWM>:

void TMR1_vSetFrequency_PWM(u16 Copy_u16Frequency)
{
	#if TMR1_MODE == TMR1_FAST_PWM_ICR1
	//under condition -> tick time = 4 usec.
	ICR1 = (1000000ul/(4*Copy_u16Frequency))-1;
     d7e:	9c 01       	movw	r18, r24
     d80:	22 0f       	add	r18, r18
     d82:	33 1f       	adc	r19, r19
     d84:	22 0f       	add	r18, r18
     d86:	33 1f       	adc	r19, r19
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	60 e4       	ldi	r22, 0x40	; 64
     d8e:	72 e4       	ldi	r23, 0x42	; 66
     d90:	8f e0       	ldi	r24, 0x0F	; 15
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__udivmodsi4>
     d98:	21 50       	subi	r18, 0x01	; 1
     d9a:	30 40       	sbci	r19, 0x00	; 0
     d9c:	37 bd       	out	0x27, r19	; 39
     d9e:	26 bd       	out	0x26, r18	; 38
	#endif
}
     da0:	08 95       	ret

00000da2 <__subsf3>:
     da2:	50 58       	subi	r21, 0x80	; 128

00000da4 <__addsf3>:
     da4:	bb 27       	eor	r27, r27
     da6:	aa 27       	eor	r26, r26
     da8:	0e d0       	rcall	.+28     	; 0xdc6 <__addsf3x>
     daa:	70 c1       	rjmp	.+736    	; 0x108c <__fp_round>
     dac:	61 d1       	rcall	.+706    	; 0x1070 <__fp_pscA>
     dae:	30 f0       	brcs	.+12     	; 0xdbc <__addsf3+0x18>
     db0:	66 d1       	rcall	.+716    	; 0x107e <__fp_pscB>
     db2:	20 f0       	brcs	.+8      	; 0xdbc <__addsf3+0x18>
     db4:	31 f4       	brne	.+12     	; 0xdc2 <__addsf3+0x1e>
     db6:	9f 3f       	cpi	r25, 0xFF	; 255
     db8:	11 f4       	brne	.+4      	; 0xdbe <__addsf3+0x1a>
     dba:	1e f4       	brtc	.+6      	; 0xdc2 <__addsf3+0x1e>
     dbc:	56 c1       	rjmp	.+684    	; 0x106a <__fp_nan>
     dbe:	0e f4       	brtc	.+2      	; 0xdc2 <__addsf3+0x1e>
     dc0:	e0 95       	com	r30
     dc2:	e7 fb       	bst	r30, 7
     dc4:	4c c1       	rjmp	.+664    	; 0x105e <__fp_inf>

00000dc6 <__addsf3x>:
     dc6:	e9 2f       	mov	r30, r25
     dc8:	72 d1       	rcall	.+740    	; 0x10ae <__fp_split3>
     dca:	80 f3       	brcs	.-32     	; 0xdac <__addsf3+0x8>
     dcc:	ba 17       	cp	r27, r26
     dce:	62 07       	cpc	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	95 07       	cpc	r25, r21
     dd6:	18 f0       	brcs	.+6      	; 0xdde <__addsf3x+0x18>
     dd8:	71 f4       	brne	.+28     	; 0xdf6 <__addsf3x+0x30>
     dda:	9e f5       	brtc	.+102    	; 0xe42 <__addsf3x+0x7c>
     ddc:	8a c1       	rjmp	.+788    	; 0x10f2 <__fp_zero>
     dde:	0e f4       	brtc	.+2      	; 0xde2 <__addsf3x+0x1c>
     de0:	e0 95       	com	r30
     de2:	0b 2e       	mov	r0, r27
     de4:	ba 2f       	mov	r27, r26
     de6:	a0 2d       	mov	r26, r0
     de8:	0b 01       	movw	r0, r22
     dea:	b9 01       	movw	r22, r18
     dec:	90 01       	movw	r18, r0
     dee:	0c 01       	movw	r0, r24
     df0:	ca 01       	movw	r24, r20
     df2:	a0 01       	movw	r20, r0
     df4:	11 24       	eor	r1, r1
     df6:	ff 27       	eor	r31, r31
     df8:	59 1b       	sub	r21, r25
     dfa:	99 f0       	breq	.+38     	; 0xe22 <__addsf3x+0x5c>
     dfc:	59 3f       	cpi	r21, 0xF9	; 249
     dfe:	50 f4       	brcc	.+20     	; 0xe14 <__addsf3x+0x4e>
     e00:	50 3e       	cpi	r21, 0xE0	; 224
     e02:	68 f1       	brcs	.+90     	; 0xe5e <__addsf3x+0x98>
     e04:	1a 16       	cp	r1, r26
     e06:	f0 40       	sbci	r31, 0x00	; 0
     e08:	a2 2f       	mov	r26, r18
     e0a:	23 2f       	mov	r18, r19
     e0c:	34 2f       	mov	r19, r20
     e0e:	44 27       	eor	r20, r20
     e10:	58 5f       	subi	r21, 0xF8	; 248
     e12:	f3 cf       	rjmp	.-26     	; 0xdfa <__addsf3x+0x34>
     e14:	46 95       	lsr	r20
     e16:	37 95       	ror	r19
     e18:	27 95       	ror	r18
     e1a:	a7 95       	ror	r26
     e1c:	f0 40       	sbci	r31, 0x00	; 0
     e1e:	53 95       	inc	r21
     e20:	c9 f7       	brne	.-14     	; 0xe14 <__addsf3x+0x4e>
     e22:	7e f4       	brtc	.+30     	; 0xe42 <__addsf3x+0x7c>
     e24:	1f 16       	cp	r1, r31
     e26:	ba 0b       	sbc	r27, r26
     e28:	62 0b       	sbc	r22, r18
     e2a:	73 0b       	sbc	r23, r19
     e2c:	84 0b       	sbc	r24, r20
     e2e:	ba f0       	brmi	.+46     	; 0xe5e <__addsf3x+0x98>
     e30:	91 50       	subi	r25, 0x01	; 1
     e32:	a1 f0       	breq	.+40     	; 0xe5c <__addsf3x+0x96>
     e34:	ff 0f       	add	r31, r31
     e36:	bb 1f       	adc	r27, r27
     e38:	66 1f       	adc	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	c2 f7       	brpl	.-16     	; 0xe30 <__addsf3x+0x6a>
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <__addsf3x+0x98>
     e42:	ba 0f       	add	r27, r26
     e44:	62 1f       	adc	r22, r18
     e46:	73 1f       	adc	r23, r19
     e48:	84 1f       	adc	r24, r20
     e4a:	48 f4       	brcc	.+18     	; 0xe5e <__addsf3x+0x98>
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b7 95       	ror	r27
     e54:	f7 95       	ror	r31
     e56:	9e 3f       	cpi	r25, 0xFE	; 254
     e58:	08 f0       	brcs	.+2      	; 0xe5c <__addsf3x+0x96>
     e5a:	b3 cf       	rjmp	.-154    	; 0xdc2 <__addsf3+0x1e>
     e5c:	93 95       	inc	r25
     e5e:	88 0f       	add	r24, r24
     e60:	08 f0       	brcs	.+2      	; 0xe64 <__addsf3x+0x9e>
     e62:	99 27       	eor	r25, r25
     e64:	ee 0f       	add	r30, r30
     e66:	97 95       	ror	r25
     e68:	87 95       	ror	r24
     e6a:	08 95       	ret

00000e6c <__cmpsf2>:
     e6c:	d4 d0       	rcall	.+424    	; 0x1016 <__fp_cmp>
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <__cmpsf2+0x6>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	08 95       	ret

00000e74 <__divsf3>:
     e74:	0c d0       	rcall	.+24     	; 0xe8e <__divsf3x>
     e76:	0a c1       	rjmp	.+532    	; 0x108c <__fp_round>
     e78:	02 d1       	rcall	.+516    	; 0x107e <__fp_pscB>
     e7a:	40 f0       	brcs	.+16     	; 0xe8c <__divsf3+0x18>
     e7c:	f9 d0       	rcall	.+498    	; 0x1070 <__fp_pscA>
     e7e:	30 f0       	brcs	.+12     	; 0xe8c <__divsf3+0x18>
     e80:	21 f4       	brne	.+8      	; 0xe8a <__divsf3+0x16>
     e82:	5f 3f       	cpi	r21, 0xFF	; 255
     e84:	19 f0       	breq	.+6      	; 0xe8c <__divsf3+0x18>
     e86:	eb c0       	rjmp	.+470    	; 0x105e <__fp_inf>
     e88:	51 11       	cpse	r21, r1
     e8a:	34 c1       	rjmp	.+616    	; 0x10f4 <__fp_szero>
     e8c:	ee c0       	rjmp	.+476    	; 0x106a <__fp_nan>

00000e8e <__divsf3x>:
     e8e:	0f d1       	rcall	.+542    	; 0x10ae <__fp_split3>
     e90:	98 f3       	brcs	.-26     	; 0xe78 <__divsf3+0x4>

00000e92 <__divsf3_pse>:
     e92:	99 23       	and	r25, r25
     e94:	c9 f3       	breq	.-14     	; 0xe88 <__divsf3+0x14>
     e96:	55 23       	and	r21, r21
     e98:	b1 f3       	breq	.-20     	; 0xe86 <__divsf3+0x12>
     e9a:	95 1b       	sub	r25, r21
     e9c:	55 0b       	sbc	r21, r21
     e9e:	bb 27       	eor	r27, r27
     ea0:	aa 27       	eor	r26, r26
     ea2:	62 17       	cp	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	38 f0       	brcs	.+14     	; 0xeb8 <__divsf3_pse+0x26>
     eaa:	9f 5f       	subi	r25, 0xFF	; 255
     eac:	5f 4f       	sbci	r21, 0xFF	; 255
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	44 1f       	adc	r20, r20
     eb4:	aa 1f       	adc	r26, r26
     eb6:	a9 f3       	breq	.-22     	; 0xea2 <__divsf3_pse+0x10>
     eb8:	33 d0       	rcall	.+102    	; 0xf20 <__divsf3_pse+0x8e>
     eba:	0e 2e       	mov	r0, r30
     ebc:	3a f0       	brmi	.+14     	; 0xecc <__divsf3_pse+0x3a>
     ebe:	e0 e8       	ldi	r30, 0x80	; 128
     ec0:	30 d0       	rcall	.+96     	; 0xf22 <__divsf3_pse+0x90>
     ec2:	91 50       	subi	r25, 0x01	; 1
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	e6 95       	lsr	r30
     ec8:	00 1c       	adc	r0, r0
     eca:	ca f7       	brpl	.-14     	; 0xebe <__divsf3_pse+0x2c>
     ecc:	29 d0       	rcall	.+82     	; 0xf20 <__divsf3_pse+0x8e>
     ece:	fe 2f       	mov	r31, r30
     ed0:	27 d0       	rcall	.+78     	; 0xf20 <__divsf3_pse+0x8e>
     ed2:	66 0f       	add	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	88 1f       	adc	r24, r24
     ed8:	bb 1f       	adc	r27, r27
     eda:	26 17       	cp	r18, r22
     edc:	37 07       	cpc	r19, r23
     ede:	48 07       	cpc	r20, r24
     ee0:	ab 07       	cpc	r26, r27
     ee2:	b0 e8       	ldi	r27, 0x80	; 128
     ee4:	09 f0       	breq	.+2      	; 0xee8 <__divsf3_pse+0x56>
     ee6:	bb 0b       	sbc	r27, r27
     ee8:	80 2d       	mov	r24, r0
     eea:	bf 01       	movw	r22, r30
     eec:	ff 27       	eor	r31, r31
     eee:	93 58       	subi	r25, 0x83	; 131
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	2a f0       	brmi	.+10     	; 0xefe <__divsf3_pse+0x6c>
     ef4:	9e 3f       	cpi	r25, 0xFE	; 254
     ef6:	51 05       	cpc	r21, r1
     ef8:	68 f0       	brcs	.+26     	; 0xf14 <__divsf3_pse+0x82>
     efa:	b1 c0       	rjmp	.+354    	; 0x105e <__fp_inf>
     efc:	fb c0       	rjmp	.+502    	; 0x10f4 <__fp_szero>
     efe:	5f 3f       	cpi	r21, 0xFF	; 255
     f00:	ec f3       	brlt	.-6      	; 0xefc <__divsf3_pse+0x6a>
     f02:	98 3e       	cpi	r25, 0xE8	; 232
     f04:	dc f3       	brlt	.-10     	; 0xefc <__divsf3_pse+0x6a>
     f06:	86 95       	lsr	r24
     f08:	77 95       	ror	r23
     f0a:	67 95       	ror	r22
     f0c:	b7 95       	ror	r27
     f0e:	f7 95       	ror	r31
     f10:	9f 5f       	subi	r25, 0xFF	; 255
     f12:	c9 f7       	brne	.-14     	; 0xf06 <__divsf3_pse+0x74>
     f14:	88 0f       	add	r24, r24
     f16:	91 1d       	adc	r25, r1
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	97 f9       	bld	r25, 7
     f1e:	08 95       	ret
     f20:	e1 e0       	ldi	r30, 0x01	; 1
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	bb 1f       	adc	r27, r27
     f2a:	62 17       	cp	r22, r18
     f2c:	73 07       	cpc	r23, r19
     f2e:	84 07       	cpc	r24, r20
     f30:	ba 07       	cpc	r27, r26
     f32:	20 f0       	brcs	.+8      	; 0xf3c <__divsf3_pse+0xaa>
     f34:	62 1b       	sub	r22, r18
     f36:	73 0b       	sbc	r23, r19
     f38:	84 0b       	sbc	r24, r20
     f3a:	ba 0b       	sbc	r27, r26
     f3c:	ee 1f       	adc	r30, r30
     f3e:	88 f7       	brcc	.-30     	; 0xf22 <__divsf3_pse+0x90>
     f40:	e0 95       	com	r30
     f42:	08 95       	ret

00000f44 <__fixunssfsi>:
     f44:	bc d0       	rcall	.+376    	; 0x10be <__fp_splitA>
     f46:	88 f0       	brcs	.+34     	; 0xf6a <__fixunssfsi+0x26>
     f48:	9f 57       	subi	r25, 0x7F	; 127
     f4a:	90 f0       	brcs	.+36     	; 0xf70 <__fixunssfsi+0x2c>
     f4c:	b9 2f       	mov	r27, r25
     f4e:	99 27       	eor	r25, r25
     f50:	b7 51       	subi	r27, 0x17	; 23
     f52:	a0 f0       	brcs	.+40     	; 0xf7c <__fixunssfsi+0x38>
     f54:	d1 f0       	breq	.+52     	; 0xf8a <__fixunssfsi+0x46>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	1a f0       	brmi	.+6      	; 0xf66 <__fixunssfsi+0x22>
     f60:	ba 95       	dec	r27
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__fixunssfsi+0x12>
     f64:	12 c0       	rjmp	.+36     	; 0xf8a <__fixunssfsi+0x46>
     f66:	b1 30       	cpi	r27, 0x01	; 1
     f68:	81 f0       	breq	.+32     	; 0xf8a <__fixunssfsi+0x46>
     f6a:	c3 d0       	rcall	.+390    	; 0x10f2 <__fp_zero>
     f6c:	b1 e0       	ldi	r27, 0x01	; 1
     f6e:	08 95       	ret
     f70:	c0 c0       	rjmp	.+384    	; 0x10f2 <__fp_zero>
     f72:	67 2f       	mov	r22, r23
     f74:	78 2f       	mov	r23, r24
     f76:	88 27       	eor	r24, r24
     f78:	b8 5f       	subi	r27, 0xF8	; 248
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__fixunssfsi+0x46>
     f7c:	b9 3f       	cpi	r27, 0xF9	; 249
     f7e:	cc f3       	brlt	.-14     	; 0xf72 <__fixunssfsi+0x2e>
     f80:	86 95       	lsr	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b3 95       	inc	r27
     f88:	d9 f7       	brne	.-10     	; 0xf80 <__fixunssfsi+0x3c>
     f8a:	3e f4       	brtc	.+14     	; 0xf9a <__fixunssfsi+0x56>
     f8c:	90 95       	com	r25
     f8e:	80 95       	com	r24
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__floatunsisf>:
     f9c:	e8 94       	clt
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <__floatsisf+0x12>

00000fa0 <__floatsisf>:
     fa0:	97 fb       	bst	r25, 7
     fa2:	3e f4       	brtc	.+14     	; 0xfb2 <__floatsisf+0x12>
     fa4:	90 95       	com	r25
     fa6:	80 95       	com	r24
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	99 23       	and	r25, r25
     fb4:	a9 f0       	breq	.+42     	; 0xfe0 <__floatsisf+0x40>
     fb6:	f9 2f       	mov	r31, r25
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	bb 27       	eor	r27, r27
     fbc:	93 95       	inc	r25
     fbe:	f6 95       	lsr	r31
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f1 11       	cpse	r31, r1
     fca:	f8 cf       	rjmp	.-16     	; 0xfbc <__floatsisf+0x1c>
     fcc:	fa f4       	brpl	.+62     	; 0x100c <__floatsisf+0x6c>
     fce:	bb 0f       	add	r27, r27
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__floatsisf+0x36>
     fd2:	60 ff       	sbrs	r22, 0
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <__floatsisf+0x6c>
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	16 c0       	rjmp	.+44     	; 0x100c <__floatsisf+0x6c>
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <__floatsisf+0x48>
     fe4:	96 e9       	ldi	r25, 0x96	; 150
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <__floatsisf+0x6a>
     fe8:	77 23       	and	r23, r23
     fea:	21 f0       	breq	.+8      	; 0xff4 <__floatsisf+0x54>
     fec:	9e e8       	ldi	r25, 0x8E	; 142
     fee:	87 2f       	mov	r24, r23
     ff0:	76 2f       	mov	r23, r22
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__floatsisf+0x5e>
     ff4:	66 23       	and	r22, r22
     ff6:	71 f0       	breq	.+28     	; 0x1014 <__floatsisf+0x74>
     ff8:	96 e8       	ldi	r25, 0x86	; 134
     ffa:	86 2f       	mov	r24, r22
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	2a f0       	brmi	.+10     	; 0x100c <__floatsisf+0x6c>
    1002:	9a 95       	dec	r25
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <__floatsisf+0x62>
    100c:	88 0f       	add	r24, r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__fp_cmp>:
    1016:	99 0f       	add	r25, r25
    1018:	00 08       	sbc	r0, r0
    101a:	55 0f       	add	r21, r21
    101c:	aa 0b       	sbc	r26, r26
    101e:	e0 e8       	ldi	r30, 0x80	; 128
    1020:	fe ef       	ldi	r31, 0xFE	; 254
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	e8 07       	cpc	r30, r24
    1028:	f9 07       	cpc	r31, r25
    102a:	c0 f0       	brcs	.+48     	; 0x105c <__fp_cmp+0x46>
    102c:	12 16       	cp	r1, r18
    102e:	13 06       	cpc	r1, r19
    1030:	e4 07       	cpc	r30, r20
    1032:	f5 07       	cpc	r31, r21
    1034:	98 f0       	brcs	.+38     	; 0x105c <__fp_cmp+0x46>
    1036:	62 1b       	sub	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	95 0b       	sbc	r25, r21
    103e:	39 f4       	brne	.+14     	; 0x104e <__fp_cmp+0x38>
    1040:	0a 26       	eor	r0, r26
    1042:	61 f0       	breq	.+24     	; 0x105c <__fp_cmp+0x46>
    1044:	23 2b       	or	r18, r19
    1046:	24 2b       	or	r18, r20
    1048:	25 2b       	or	r18, r21
    104a:	21 f4       	brne	.+8      	; 0x1054 <__fp_cmp+0x3e>
    104c:	08 95       	ret
    104e:	0a 26       	eor	r0, r26
    1050:	09 f4       	brne	.+2      	; 0x1054 <__fp_cmp+0x3e>
    1052:	a1 40       	sbci	r26, 0x01	; 1
    1054:	a6 95       	lsr	r26
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	81 1d       	adc	r24, r1
    105a:	81 1d       	adc	r24, r1
    105c:	08 95       	ret

0000105e <__fp_inf>:
    105e:	97 f9       	bld	r25, 7
    1060:	9f 67       	ori	r25, 0x7F	; 127
    1062:	80 e8       	ldi	r24, 0x80	; 128
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	08 95       	ret

0000106a <__fp_nan>:
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	80 ec       	ldi	r24, 0xC0	; 192
    106e:	08 95       	ret

00001070 <__fp_pscA>:
    1070:	00 24       	eor	r0, r0
    1072:	0a 94       	dec	r0
    1074:	16 16       	cp	r1, r22
    1076:	17 06       	cpc	r1, r23
    1078:	18 06       	cpc	r1, r24
    107a:	09 06       	cpc	r0, r25
    107c:	08 95       	ret

0000107e <__fp_pscB>:
    107e:	00 24       	eor	r0, r0
    1080:	0a 94       	dec	r0
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	05 06       	cpc	r0, r21
    108a:	08 95       	ret

0000108c <__fp_round>:
    108c:	09 2e       	mov	r0, r25
    108e:	03 94       	inc	r0
    1090:	00 0c       	add	r0, r0
    1092:	11 f4       	brne	.+4      	; 0x1098 <__fp_round+0xc>
    1094:	88 23       	and	r24, r24
    1096:	52 f0       	brmi	.+20     	; 0x10ac <__fp_round+0x20>
    1098:	bb 0f       	add	r27, r27
    109a:	40 f4       	brcc	.+16     	; 0x10ac <__fp_round+0x20>
    109c:	bf 2b       	or	r27, r31
    109e:	11 f4       	brne	.+4      	; 0x10a4 <__fp_round+0x18>
    10a0:	60 ff       	sbrs	r22, 0
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <__fp_round+0x20>
    10a4:	6f 5f       	subi	r22, 0xFF	; 255
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__fp_split3>:
    10ae:	57 fd       	sbrc	r21, 7
    10b0:	90 58       	subi	r25, 0x80	; 128
    10b2:	44 0f       	add	r20, r20
    10b4:	55 1f       	adc	r21, r21
    10b6:	59 f0       	breq	.+22     	; 0x10ce <__fp_splitA+0x10>
    10b8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <__fp_splitA+0x1a>
    10bc:	47 95       	ror	r20

000010be <__fp_splitA>:
    10be:	88 0f       	add	r24, r24
    10c0:	97 fb       	bst	r25, 7
    10c2:	99 1f       	adc	r25, r25
    10c4:	61 f0       	breq	.+24     	; 0x10de <__fp_splitA+0x20>
    10c6:	9f 3f       	cpi	r25, 0xFF	; 255
    10c8:	79 f0       	breq	.+30     	; 0x10e8 <__fp_splitA+0x2a>
    10ca:	87 95       	ror	r24
    10cc:	08 95       	ret
    10ce:	12 16       	cp	r1, r18
    10d0:	13 06       	cpc	r1, r19
    10d2:	14 06       	cpc	r1, r20
    10d4:	55 1f       	adc	r21, r21
    10d6:	f2 cf       	rjmp	.-28     	; 0x10bc <__fp_split3+0xe>
    10d8:	46 95       	lsr	r20
    10da:	f1 df       	rcall	.-30     	; 0x10be <__fp_splitA>
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <__fp_splitA+0x30>
    10de:	16 16       	cp	r1, r22
    10e0:	17 06       	cpc	r1, r23
    10e2:	18 06       	cpc	r1, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	f1 cf       	rjmp	.-30     	; 0x10ca <__fp_splitA+0xc>
    10e8:	86 95       	lsr	r24
    10ea:	71 05       	cpc	r23, r1
    10ec:	61 05       	cpc	r22, r1
    10ee:	08 94       	sec
    10f0:	08 95       	ret

000010f2 <__fp_zero>:
    10f2:	e8 94       	clt

000010f4 <__fp_szero>:
    10f4:	bb 27       	eor	r27, r27
    10f6:	66 27       	eor	r22, r22
    10f8:	77 27       	eor	r23, r23
    10fa:	cb 01       	movw	r24, r22
    10fc:	97 f9       	bld	r25, 7
    10fe:	08 95       	ret

00001100 <__mulsf3>:
    1100:	0b d0       	rcall	.+22     	; 0x1118 <__mulsf3x>
    1102:	c4 cf       	rjmp	.-120    	; 0x108c <__fp_round>
    1104:	b5 df       	rcall	.-150    	; 0x1070 <__fp_pscA>
    1106:	28 f0       	brcs	.+10     	; 0x1112 <__mulsf3+0x12>
    1108:	ba df       	rcall	.-140    	; 0x107e <__fp_pscB>
    110a:	18 f0       	brcs	.+6      	; 0x1112 <__mulsf3+0x12>
    110c:	95 23       	and	r25, r21
    110e:	09 f0       	breq	.+2      	; 0x1112 <__mulsf3+0x12>
    1110:	a6 cf       	rjmp	.-180    	; 0x105e <__fp_inf>
    1112:	ab cf       	rjmp	.-170    	; 0x106a <__fp_nan>
    1114:	11 24       	eor	r1, r1
    1116:	ee cf       	rjmp	.-36     	; 0x10f4 <__fp_szero>

00001118 <__mulsf3x>:
    1118:	ca df       	rcall	.-108    	; 0x10ae <__fp_split3>
    111a:	a0 f3       	brcs	.-24     	; 0x1104 <__mulsf3+0x4>

0000111c <__mulsf3_pse>:
    111c:	95 9f       	mul	r25, r21
    111e:	d1 f3       	breq	.-12     	; 0x1114 <__mulsf3+0x14>
    1120:	95 0f       	add	r25, r21
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	55 1f       	adc	r21, r21
    1126:	62 9f       	mul	r22, r18
    1128:	f0 01       	movw	r30, r0
    112a:	72 9f       	mul	r23, r18
    112c:	bb 27       	eor	r27, r27
    112e:	f0 0d       	add	r31, r0
    1130:	b1 1d       	adc	r27, r1
    1132:	63 9f       	mul	r22, r19
    1134:	aa 27       	eor	r26, r26
    1136:	f0 0d       	add	r31, r0
    1138:	b1 1d       	adc	r27, r1
    113a:	aa 1f       	adc	r26, r26
    113c:	64 9f       	mul	r22, r20
    113e:	66 27       	eor	r22, r22
    1140:	b0 0d       	add	r27, r0
    1142:	a1 1d       	adc	r26, r1
    1144:	66 1f       	adc	r22, r22
    1146:	82 9f       	mul	r24, r18
    1148:	22 27       	eor	r18, r18
    114a:	b0 0d       	add	r27, r0
    114c:	a1 1d       	adc	r26, r1
    114e:	62 1f       	adc	r22, r18
    1150:	73 9f       	mul	r23, r19
    1152:	b0 0d       	add	r27, r0
    1154:	a1 1d       	adc	r26, r1
    1156:	62 1f       	adc	r22, r18
    1158:	83 9f       	mul	r24, r19
    115a:	a0 0d       	add	r26, r0
    115c:	61 1d       	adc	r22, r1
    115e:	22 1f       	adc	r18, r18
    1160:	74 9f       	mul	r23, r20
    1162:	33 27       	eor	r19, r19
    1164:	a0 0d       	add	r26, r0
    1166:	61 1d       	adc	r22, r1
    1168:	23 1f       	adc	r18, r19
    116a:	84 9f       	mul	r24, r20
    116c:	60 0d       	add	r22, r0
    116e:	21 1d       	adc	r18, r1
    1170:	82 2f       	mov	r24, r18
    1172:	76 2f       	mov	r23, r22
    1174:	6a 2f       	mov	r22, r26
    1176:	11 24       	eor	r1, r1
    1178:	9f 57       	subi	r25, 0x7F	; 127
    117a:	50 40       	sbci	r21, 0x00	; 0
    117c:	8a f0       	brmi	.+34     	; 0x11a0 <__mulsf3_pse+0x84>
    117e:	e1 f0       	breq	.+56     	; 0x11b8 <__mulsf3_pse+0x9c>
    1180:	88 23       	and	r24, r24
    1182:	4a f0       	brmi	.+18     	; 0x1196 <__mulsf3_pse+0x7a>
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	bb 1f       	adc	r27, r27
    118a:	66 1f       	adc	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	91 50       	subi	r25, 0x01	; 1
    1192:	50 40       	sbci	r21, 0x00	; 0
    1194:	a9 f7       	brne	.-22     	; 0x1180 <__mulsf3_pse+0x64>
    1196:	9e 3f       	cpi	r25, 0xFE	; 254
    1198:	51 05       	cpc	r21, r1
    119a:	70 f0       	brcs	.+28     	; 0x11b8 <__mulsf3_pse+0x9c>
    119c:	60 cf       	rjmp	.-320    	; 0x105e <__fp_inf>
    119e:	aa cf       	rjmp	.-172    	; 0x10f4 <__fp_szero>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	ec f3       	brlt	.-6      	; 0x119e <__mulsf3_pse+0x82>
    11a4:	98 3e       	cpi	r25, 0xE8	; 232
    11a6:	dc f3       	brlt	.-10     	; 0x119e <__mulsf3_pse+0x82>
    11a8:	86 95       	lsr	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f7 95       	ror	r31
    11b2:	e7 95       	ror	r30
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	c1 f7       	brne	.-16     	; 0x11a8 <__mulsf3_pse+0x8c>
    11b8:	fe 2b       	or	r31, r30
    11ba:	88 0f       	add	r24, r24
    11bc:	91 1d       	adc	r25, r1
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret

000011c6 <__udivmodhi4>:
    11c6:	aa 1b       	sub	r26, r26
    11c8:	bb 1b       	sub	r27, r27
    11ca:	51 e1       	ldi	r21, 0x11	; 17
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <__udivmodhi4_ep>

000011ce <__udivmodhi4_loop>:
    11ce:	aa 1f       	adc	r26, r26
    11d0:	bb 1f       	adc	r27, r27
    11d2:	a6 17       	cp	r26, r22
    11d4:	b7 07       	cpc	r27, r23
    11d6:	10 f0       	brcs	.+4      	; 0x11dc <__udivmodhi4_ep>
    11d8:	a6 1b       	sub	r26, r22
    11da:	b7 0b       	sbc	r27, r23

000011dc <__udivmodhi4_ep>:
    11dc:	88 1f       	adc	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	5a 95       	dec	r21
    11e2:	a9 f7       	brne	.-22     	; 0x11ce <__udivmodhi4_loop>
    11e4:	80 95       	com	r24
    11e6:	90 95       	com	r25
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	08 95       	ret

000011ee <__udivmodsi4>:
    11ee:	a1 e2       	ldi	r26, 0x21	; 33
    11f0:	1a 2e       	mov	r1, r26
    11f2:	aa 1b       	sub	r26, r26
    11f4:	bb 1b       	sub	r27, r27
    11f6:	fd 01       	movw	r30, r26
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <__udivmodsi4_ep>

000011fa <__udivmodsi4_loop>:
    11fa:	aa 1f       	adc	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	ee 1f       	adc	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	a2 17       	cp	r26, r18
    1204:	b3 07       	cpc	r27, r19
    1206:	e4 07       	cpc	r30, r20
    1208:	f5 07       	cpc	r31, r21
    120a:	20 f0       	brcs	.+8      	; 0x1214 <__udivmodsi4_ep>
    120c:	a2 1b       	sub	r26, r18
    120e:	b3 0b       	sbc	r27, r19
    1210:	e4 0b       	sbc	r30, r20
    1212:	f5 0b       	sbc	r31, r21

00001214 <__udivmodsi4_ep>:
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	1a 94       	dec	r1
    121e:	69 f7       	brne	.-38     	; 0x11fa <__udivmodsi4_loop>
    1220:	60 95       	com	r22
    1222:	70 95       	com	r23
    1224:	80 95       	com	r24
    1226:	90 95       	com	r25
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	bd 01       	movw	r22, r26
    122e:	cf 01       	movw	r24, r30
    1230:	08 95       	ret

00001232 <_exit>:
    1232:	f8 94       	cli

00001234 <__stop_program>:
    1234:	ff cf       	rjmp	.-2      	; 0x1234 <__stop_program>
